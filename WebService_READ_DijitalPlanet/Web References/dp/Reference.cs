//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Ders62_WebService_READ_DijitalPlanet.dp {
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="IntegrationServiceSoap", Namespace="http://tempuri.org/")]
    public partial class IntegrationService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetAvailableApplicationResponsesOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendApplicationResponseOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMailQueueAgainResponseOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendInvoiceDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendEArchiveDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendBase64StringEArchiveDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReSendInvoiceDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendInvoiceDataWithTemplateCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendEArchiveDataWithTemplateCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendBase64StringEArchiveDataWithTemplateCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelEArchiveInvoiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelInvoiceNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelEArchiveInvoiceStringDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelEArchiveInvoiceStringDateAndAmountOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendBase64StringInvoiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendBase64StringInvoiceWithTemplateCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendXmlInvoiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendUBLInvoiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadFromArchiveOutgoingOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadFromArchiveUBLOutgoingOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadFromArchiveEnvelopeOutgoingOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadFromArchiveIncomingOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadFromArchiveUBLIncomingOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadFromArchiveEnvelopeIncomingOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendCumulativeInvoiceDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckGibStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEInvoiceSenderListUpdatesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEInvoiceReceiverListUpdatesOperationCompleted;
        
        private System.Threading.SendOrPostCallback AcceptInvoiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback RejectInvoiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback RejectInvoiceWithNotifyOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckInvoiceStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvailableInvoiceReturnStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInvoiceByInvoiceIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInboundInvoiceByMapCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckEArchiveInvoiceStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckEArchiveReportStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteEArchiveInvoiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteEArchiveReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckInvoiceStateWithReconciliationIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckEnvelopeStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEnvelopeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvailableInvoicesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvailableInvoicesPWOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvailableCompletedInvoicesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvailableInvoicesByDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvailableInvoicesWithDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetIncomingInvoicesByIssueDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEArchiveReportListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEArchiveReportListWithPeriodOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInvoiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInvoicePWOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInvoiceAllDirectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInvoicePDFOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInvoicePDFByInvoiceIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInvoicePDFByInvoiceIdWithoutDirectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInvoiceImageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInvoiceTemplateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEArchiveInvoiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEArchiveIncomingInvoiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEArchiveReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInvoiceXMLOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInvoiceXMLWithOutFlagOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInvoiceWithOutFlagOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckTaxIdListFromExcelFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckCustomerTaxIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckCustomerTaxIdbyDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTaxIdListbyDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEInvoiceCustomerListByDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEInvoiceCustomerFullListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFormsAuthenticationTicketOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFormsAuthenticationTicketPWOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelInvoiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReSendInvoiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInvoiceSummaryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInvoiceSummaryWithDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInvoiceCountWithDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerDifferenceXmlOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerDifferenceBase64XmlOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogServerStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvailableSentInvoicesByDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvailableSentInvoicesByIssueDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessDataWithCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHashOfInvoiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEArchiveInvoicesByDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEArchiveInvoicesWithDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEArchiveInvoicesWithIssueDateAndTaxNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInvoiceHTMLOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEArchiveInvoicesByReportNoOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendInvoiceAsEmailOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNewInvoiceIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReconciliationEArchiveByDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReconciliationEArchiveByDateExtendedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetGTBRefAndRegisterNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendTaxFreeInvoiceDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelInvoiceDataForTaxFreeOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadFromArchiveEArchiveOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadFromArchiveEArchiveReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetIncomingInvoiceBranchInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateEnvelopeStatusFromGibOperationCompleted;
        
        private System.Threading.SendOrPostCallback OutSidersSendEmailOperationCompleted;
        
        private System.Threading.SendOrPostCallback PartnerAndCorporateContourInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback CorporateContourInfoOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public IntegrationService() {
            this.Url = global::Ders62_WebService_READ_DijitalPlanet.Properties.Settings.Default.Ders62_WebService_READ_DijitalPlanet_dp_IntegrationService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetAvailableApplicationResponsesCompletedEventHandler GetAvailableApplicationResponsesCompleted;
        
        /// <remarks/>
        public event SendApplicationResponseCompletedEventHandler SendApplicationResponseCompleted;
        
        /// <remarks/>
        public event SendMailQueueAgainResponseCompletedEventHandler SendMailQueueAgainResponseCompleted;
        
        /// <remarks/>
        public event SendInvoiceDataCompletedEventHandler SendInvoiceDataCompleted;
        
        /// <remarks/>
        public event SendEArchiveDataCompletedEventHandler SendEArchiveDataCompleted;
        
        /// <remarks/>
        public event SendBase64StringEArchiveDataCompletedEventHandler SendBase64StringEArchiveDataCompleted;
        
        /// <remarks/>
        public event ReSendInvoiceDataCompletedEventHandler ReSendInvoiceDataCompleted;
        
        /// <remarks/>
        public event SendInvoiceDataWithTemplateCodeCompletedEventHandler SendInvoiceDataWithTemplateCodeCompleted;
        
        /// <remarks/>
        public event SendEArchiveDataWithTemplateCodeCompletedEventHandler SendEArchiveDataWithTemplateCodeCompleted;
        
        /// <remarks/>
        public event SendBase64StringEArchiveDataWithTemplateCodeCompletedEventHandler SendBase64StringEArchiveDataWithTemplateCodeCompleted;
        
        /// <remarks/>
        public event CancelEArchiveInvoiceCompletedEventHandler CancelEArchiveInvoiceCompleted;
        
        /// <remarks/>
        public event CancelInvoiceNumberCompletedEventHandler CancelInvoiceNumberCompleted;
        
        /// <remarks/>
        public event CancelEArchiveInvoiceStringDateCompletedEventHandler CancelEArchiveInvoiceStringDateCompleted;
        
        /// <remarks/>
        public event CancelEArchiveInvoiceStringDateAndAmountCompletedEventHandler CancelEArchiveInvoiceStringDateAndAmountCompleted;
        
        /// <remarks/>
        public event SendBase64StringInvoiceCompletedEventHandler SendBase64StringInvoiceCompleted;
        
        /// <remarks/>
        public event SendBase64StringInvoiceWithTemplateCodeCompletedEventHandler SendBase64StringInvoiceWithTemplateCodeCompleted;
        
        /// <remarks/>
        public event SendXmlInvoiceCompletedEventHandler SendXmlInvoiceCompleted;
        
        /// <remarks/>
        public event SendUBLInvoiceCompletedEventHandler SendUBLInvoiceCompleted;
        
        /// <remarks/>
        public event UploadFromArchiveOutgoingCompletedEventHandler UploadFromArchiveOutgoingCompleted;
        
        /// <remarks/>
        public event UploadFromArchiveUBLOutgoingCompletedEventHandler UploadFromArchiveUBLOutgoingCompleted;
        
        /// <remarks/>
        public event UploadFromArchiveEnvelopeOutgoingCompletedEventHandler UploadFromArchiveEnvelopeOutgoingCompleted;
        
        /// <remarks/>
        public event UploadFromArchiveIncomingCompletedEventHandler UploadFromArchiveIncomingCompleted;
        
        /// <remarks/>
        public event UploadFromArchiveUBLIncomingCompletedEventHandler UploadFromArchiveUBLIncomingCompleted;
        
        /// <remarks/>
        public event UploadFromArchiveEnvelopeIncomingCompletedEventHandler UploadFromArchiveEnvelopeIncomingCompleted;
        
        /// <remarks/>
        public event SendCumulativeInvoiceDataCompletedEventHandler SendCumulativeInvoiceDataCompleted;
        
        /// <remarks/>
        public event CheckGibStatusCompletedEventHandler CheckGibStatusCompleted;
        
        /// <remarks/>
        public event GetEInvoiceSenderListUpdatesCompletedEventHandler GetEInvoiceSenderListUpdatesCompleted;
        
        /// <remarks/>
        public event GetEInvoiceReceiverListUpdatesCompletedEventHandler GetEInvoiceReceiverListUpdatesCompleted;
        
        /// <remarks/>
        public event AcceptInvoiceCompletedEventHandler AcceptInvoiceCompleted;
        
        /// <remarks/>
        public event RejectInvoiceCompletedEventHandler RejectInvoiceCompleted;
        
        /// <remarks/>
        public event RejectInvoiceWithNotifyCompletedEventHandler RejectInvoiceWithNotifyCompleted;
        
        /// <remarks/>
        public event CheckInvoiceStateCompletedEventHandler CheckInvoiceStateCompleted;
        
        /// <remarks/>
        public event GetAvailableInvoiceReturnStatusCompletedEventHandler GetAvailableInvoiceReturnStatusCompleted;
        
        /// <remarks/>
        public event GetInvoiceByInvoiceIDCompletedEventHandler GetInvoiceByInvoiceIDCompleted;
        
        /// <remarks/>
        public event GetInboundInvoiceByMapCodeCompletedEventHandler GetInboundInvoiceByMapCodeCompleted;
        
        /// <remarks/>
        public event CheckEArchiveInvoiceStateCompletedEventHandler CheckEArchiveInvoiceStateCompleted;
        
        /// <remarks/>
        public event CheckEArchiveReportStateCompletedEventHandler CheckEArchiveReportStateCompleted;
        
        /// <remarks/>
        public event DeleteEArchiveInvoiceCompletedEventHandler DeleteEArchiveInvoiceCompleted;
        
        /// <remarks/>
        public event DeleteEArchiveReportCompletedEventHandler DeleteEArchiveReportCompleted;
        
        /// <remarks/>
        public event CheckInvoiceStateWithReconciliationIDCompletedEventHandler CheckInvoiceStateWithReconciliationIDCompleted;
        
        /// <remarks/>
        public event CheckEnvelopeStateCompletedEventHandler CheckEnvelopeStateCompleted;
        
        /// <remarks/>
        public event GetEnvelopeCompletedEventHandler GetEnvelopeCompleted;
        
        /// <remarks/>
        public event GetAvailableInvoicesCompletedEventHandler GetAvailableInvoicesCompleted;
        
        /// <remarks/>
        public event GetAvailableInvoicesPWCompletedEventHandler GetAvailableInvoicesPWCompleted;
        
        /// <remarks/>
        public event GetAvailableCompletedInvoicesCompletedEventHandler GetAvailableCompletedInvoicesCompleted;
        
        /// <remarks/>
        public event GetAvailableInvoicesByDateCompletedEventHandler GetAvailableInvoicesByDateCompleted;
        
        /// <remarks/>
        public event GetAvailableInvoicesWithDateCompletedEventHandler GetAvailableInvoicesWithDateCompleted;
        
        /// <remarks/>
        public event GetIncomingInvoicesByIssueDateCompletedEventHandler GetIncomingInvoicesByIssueDateCompleted;
        
        /// <remarks/>
        public event GetEArchiveReportListCompletedEventHandler GetEArchiveReportListCompleted;
        
        /// <remarks/>
        public event GetEArchiveReportListWithPeriodCompletedEventHandler GetEArchiveReportListWithPeriodCompleted;
        
        /// <remarks/>
        public event GetInvoiceCompletedEventHandler GetInvoiceCompleted;
        
        /// <remarks/>
        public event GetInvoicePWCompletedEventHandler GetInvoicePWCompleted;
        
        /// <remarks/>
        public event GetInvoiceAllDirectionCompletedEventHandler GetInvoiceAllDirectionCompleted;
        
        /// <remarks/>
        public event GetInvoicePDFCompletedEventHandler GetInvoicePDFCompleted;
        
        /// <remarks/>
        public event GetInvoicePDFByInvoiceIdCompletedEventHandler GetInvoicePDFByInvoiceIdCompleted;
        
        /// <remarks/>
        public event GetInvoicePDFByInvoiceIdWithoutDirectionCompletedEventHandler GetInvoicePDFByInvoiceIdWithoutDirectionCompleted;
        
        /// <remarks/>
        public event GetInvoiceImageCompletedEventHandler GetInvoiceImageCompleted;
        
        /// <remarks/>
        public event GetInvoiceTemplateCompletedEventHandler GetInvoiceTemplateCompleted;
        
        /// <remarks/>
        public event GetEArchiveInvoiceCompletedEventHandler GetEArchiveInvoiceCompleted;
        
        /// <remarks/>
        public event GetEArchiveIncomingInvoiceCompletedEventHandler GetEArchiveIncomingInvoiceCompleted;
        
        /// <remarks/>
        public event GetEArchiveReportCompletedEventHandler GetEArchiveReportCompleted;
        
        /// <remarks/>
        public event GetInvoiceXMLCompletedEventHandler GetInvoiceXMLCompleted;
        
        /// <remarks/>
        public event GetInvoiceXMLWithOutFlagCompletedEventHandler GetInvoiceXMLWithOutFlagCompleted;
        
        /// <remarks/>
        public event GetInvoiceWithOutFlagCompletedEventHandler GetInvoiceWithOutFlagCompleted;
        
        /// <remarks/>
        public event CheckTaxIdListFromExcelFileCompletedEventHandler CheckTaxIdListFromExcelFileCompleted;
        
        /// <remarks/>
        public event CheckCustomerTaxIdCompletedEventHandler CheckCustomerTaxIdCompleted;
        
        /// <remarks/>
        public event CheckCustomerTaxIdbyDateCompletedEventHandler CheckCustomerTaxIdbyDateCompleted;
        
        /// <remarks/>
        public event GetTaxIdListbyDateCompletedEventHandler GetTaxIdListbyDateCompleted;
        
        /// <remarks/>
        public event GetEInvoiceCustomerListByDateCompletedEventHandler GetEInvoiceCustomerListByDateCompleted;
        
        /// <remarks/>
        public event GetEInvoiceCustomerFullListCompletedEventHandler GetEInvoiceCustomerFullListCompleted;
        
        /// <remarks/>
        public event GetFormsAuthenticationTicketCompletedEventHandler GetFormsAuthenticationTicketCompleted;
        
        /// <remarks/>
        public event GetFormsAuthenticationTicketPWCompletedEventHandler GetFormsAuthenticationTicketPWCompleted;
        
        /// <remarks/>
        public event CancelInvoiceCompletedEventHandler CancelInvoiceCompleted;
        
        /// <remarks/>
        public event ReSendInvoiceCompletedEventHandler ReSendInvoiceCompleted;
        
        /// <remarks/>
        public event GetInvoiceSummaryCompletedEventHandler GetInvoiceSummaryCompleted;
        
        /// <remarks/>
        public event GetInvoiceSummaryWithDateCompletedEventHandler GetInvoiceSummaryWithDateCompleted;
        
        /// <remarks/>
        public event GetInvoiceCountWithDateCompletedEventHandler GetInvoiceCountWithDateCompleted;
        
        /// <remarks/>
        public event GetCustomerDifferenceXmlCompletedEventHandler GetCustomerDifferenceXmlCompleted;
        
        /// <remarks/>
        public event GetCustomerDifferenceBase64XmlCompletedEventHandler GetCustomerDifferenceBase64XmlCompleted;
        
        /// <remarks/>
        public event LogServerStatusCompletedEventHandler LogServerStatusCompleted;
        
        /// <remarks/>
        public event GetAvailableSentInvoicesByDateCompletedEventHandler GetAvailableSentInvoicesByDateCompleted;
        
        /// <remarks/>
        public event GetAvailableSentInvoicesByIssueDateCompletedEventHandler GetAvailableSentInvoicesByIssueDateCompleted;
        
        /// <remarks/>
        public event ProcessDataWithCodeCompletedEventHandler ProcessDataWithCodeCompleted;
        
        /// <remarks/>
        public event GetHashOfInvoiceCompletedEventHandler GetHashOfInvoiceCompleted;
        
        /// <remarks/>
        public event GetEArchiveInvoicesByDateCompletedEventHandler GetEArchiveInvoicesByDateCompleted;
        
        /// <remarks/>
        public event GetEArchiveInvoicesWithDateCompletedEventHandler GetEArchiveInvoicesWithDateCompleted;
        
        /// <remarks/>
        public event GetEArchiveInvoicesWithIssueDateAndTaxNumberCompletedEventHandler GetEArchiveInvoicesWithIssueDateAndTaxNumberCompleted;
        
        /// <remarks/>
        public event GetInvoiceHTMLCompletedEventHandler GetInvoiceHTMLCompleted;
        
        /// <remarks/>
        public event GetEArchiveInvoicesByReportNoCompletedEventHandler GetEArchiveInvoicesByReportNoCompleted;
        
        /// <remarks/>
        public event SendInvoiceAsEmailCompletedEventHandler SendInvoiceAsEmailCompleted;
        
        /// <remarks/>
        public event GetNewInvoiceIdCompletedEventHandler GetNewInvoiceIdCompleted;
        
        /// <remarks/>
        public event GetReconciliationEArchiveByDateCompletedEventHandler GetReconciliationEArchiveByDateCompleted;
        
        /// <remarks/>
        public event GetReconciliationEArchiveByDateExtendedCompletedEventHandler GetReconciliationEArchiveByDateExtendedCompleted;
        
        /// <remarks/>
        public event GetGTBRefAndRegisterNumberCompletedEventHandler GetGTBRefAndRegisterNumberCompleted;
        
        /// <remarks/>
        public event SendTaxFreeInvoiceDataCompletedEventHandler SendTaxFreeInvoiceDataCompleted;
        
        /// <remarks/>
        public event CancelInvoiceDataForTaxFreeCompletedEventHandler CancelInvoiceDataForTaxFreeCompleted;
        
        /// <remarks/>
        public event UploadFromArchiveEArchiveCompletedEventHandler UploadFromArchiveEArchiveCompleted;
        
        /// <remarks/>
        public event UploadFromArchiveEArchiveReportCompletedEventHandler UploadFromArchiveEArchiveReportCompleted;
        
        /// <remarks/>
        public event GetIncomingInvoiceBranchInfoCompletedEventHandler GetIncomingInvoiceBranchInfoCompleted;
        
        /// <remarks/>
        public event UpdateEnvelopeStatusFromGibCompletedEventHandler UpdateEnvelopeStatusFromGibCompleted;
        
        /// <remarks/>
        public event OutSidersSendEmailCompletedEventHandler OutSidersSendEmailCompleted;
        
        /// <remarks/>
        public event PartnerAndCorporateContourInfoCompletedEventHandler PartnerAndCorporateContourInfoCompleted;
        
        /// <remarks/>
        public event CorporateContourInfoCompletedEventHandler CorporateContourInfoCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAvailableApplicationResponses", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ApplicationResponsePackResult GetAvailableApplicationResponses(string Ticket, string CorporateCode) {
            object[] results = this.Invoke("GetAvailableApplicationResponses", new object[] {
                        Ticket,
                        CorporateCode});
            return ((ApplicationResponsePackResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvailableApplicationResponsesAsync(string Ticket, string CorporateCode) {
            this.GetAvailableApplicationResponsesAsync(Ticket, CorporateCode, null);
        }
        
        /// <remarks/>
        public void GetAvailableApplicationResponsesAsync(string Ticket, string CorporateCode, object userState) {
            if ((this.GetAvailableApplicationResponsesOperationCompleted == null)) {
                this.GetAvailableApplicationResponsesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvailableApplicationResponsesOperationCompleted);
            }
            this.InvokeAsync("GetAvailableApplicationResponses", new object[] {
                        Ticket,
                        CorporateCode}, this.GetAvailableApplicationResponsesOperationCompleted, userState);
        }
        
        private void OnGetAvailableApplicationResponsesOperationCompleted(object arg) {
            if ((this.GetAvailableApplicationResponsesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvailableApplicationResponsesCompleted(this, new GetAvailableApplicationResponsesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendApplicationResponse", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ApplicationResponseResult SendApplicationResponse(string Ticket, string UUID, string CorporateCode, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] ApplicationResponseData) {
            object[] results = this.Invoke("SendApplicationResponse", new object[] {
                        Ticket,
                        UUID,
                        CorporateCode,
                        ApplicationResponseData});
            return ((ApplicationResponseResult)(results[0]));
        }
        
        /// <remarks/>
        public void SendApplicationResponseAsync(string Ticket, string UUID, string CorporateCode, byte[] ApplicationResponseData) {
            this.SendApplicationResponseAsync(Ticket, UUID, CorporateCode, ApplicationResponseData, null);
        }
        
        /// <remarks/>
        public void SendApplicationResponseAsync(string Ticket, string UUID, string CorporateCode, byte[] ApplicationResponseData, object userState) {
            if ((this.SendApplicationResponseOperationCompleted == null)) {
                this.SendApplicationResponseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendApplicationResponseOperationCompleted);
            }
            this.InvokeAsync("SendApplicationResponse", new object[] {
                        Ticket,
                        UUID,
                        CorporateCode,
                        ApplicationResponseData}, this.SendApplicationResponseOperationCompleted, userState);
        }
        
        private void OnSendApplicationResponseOperationCompleted(object arg) {
            if ((this.SendApplicationResponseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendApplicationResponseCompleted(this, new SendApplicationResponseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMailQueueAgainResponse", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ApplicationResponseResult SendMailQueueAgainResponse(string Ticket, string UUID, string CorporateCode, string ReceiverEmail) {
            object[] results = this.Invoke("SendMailQueueAgainResponse", new object[] {
                        Ticket,
                        UUID,
                        CorporateCode,
                        ReceiverEmail});
            return ((ApplicationResponseResult)(results[0]));
        }
        
        /// <remarks/>
        public void SendMailQueueAgainResponseAsync(string Ticket, string UUID, string CorporateCode, string ReceiverEmail) {
            this.SendMailQueueAgainResponseAsync(Ticket, UUID, CorporateCode, ReceiverEmail, null);
        }
        
        /// <remarks/>
        public void SendMailQueueAgainResponseAsync(string Ticket, string UUID, string CorporateCode, string ReceiverEmail, object userState) {
            if ((this.SendMailQueueAgainResponseOperationCompleted == null)) {
                this.SendMailQueueAgainResponseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMailQueueAgainResponseOperationCompleted);
            }
            this.InvokeAsync("SendMailQueueAgainResponse", new object[] {
                        Ticket,
                        UUID,
                        CorporateCode,
                        ReceiverEmail}, this.SendMailQueueAgainResponseOperationCompleted, userState);
        }
        
        private void OnSendMailQueueAgainResponseOperationCompleted(object arg) {
            if ((this.SendMailQueueAgainResponseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMailQueueAgainResponseCompleted(this, new SendMailQueueAgainResponseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendInvoiceData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EnvelopeStateResult SendInvoiceData(string Ticket, File FileType, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] InvoiceRawData, string CorporateCode, string MapCode, string ReceiverPostboxName) {
            object[] results = this.Invoke("SendInvoiceData", new object[] {
                        Ticket,
                        FileType,
                        InvoiceRawData,
                        CorporateCode,
                        MapCode,
                        ReceiverPostboxName});
            return ((EnvelopeStateResult)(results[0]));
        }
        
        /// <remarks/>
        public void SendInvoiceDataAsync(string Ticket, File FileType, byte[] InvoiceRawData, string CorporateCode, string MapCode, string ReceiverPostboxName) {
            this.SendInvoiceDataAsync(Ticket, FileType, InvoiceRawData, CorporateCode, MapCode, ReceiverPostboxName, null);
        }
        
        /// <remarks/>
        public void SendInvoiceDataAsync(string Ticket, File FileType, byte[] InvoiceRawData, string CorporateCode, string MapCode, string ReceiverPostboxName, object userState) {
            if ((this.SendInvoiceDataOperationCompleted == null)) {
                this.SendInvoiceDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendInvoiceDataOperationCompleted);
            }
            this.InvokeAsync("SendInvoiceData", new object[] {
                        Ticket,
                        FileType,
                        InvoiceRawData,
                        CorporateCode,
                        MapCode,
                        ReceiverPostboxName}, this.SendInvoiceDataOperationCompleted, userState);
        }
        
        private void OnSendInvoiceDataOperationCompleted(object arg) {
            if ((this.SendInvoiceDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendInvoiceDataCompleted(this, new SendInvoiceDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendEArchiveData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EArchiveStateResult SendEArchiveData(string Ticket, File FileType, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] InvoiceRawData, string CorporateCode, string MapCode) {
            object[] results = this.Invoke("SendEArchiveData", new object[] {
                        Ticket,
                        FileType,
                        InvoiceRawData,
                        CorporateCode,
                        MapCode});
            return ((EArchiveStateResult)(results[0]));
        }
        
        /// <remarks/>
        public void SendEArchiveDataAsync(string Ticket, File FileType, byte[] InvoiceRawData, string CorporateCode, string MapCode) {
            this.SendEArchiveDataAsync(Ticket, FileType, InvoiceRawData, CorporateCode, MapCode, null);
        }
        
        /// <remarks/>
        public void SendEArchiveDataAsync(string Ticket, File FileType, byte[] InvoiceRawData, string CorporateCode, string MapCode, object userState) {
            if ((this.SendEArchiveDataOperationCompleted == null)) {
                this.SendEArchiveDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendEArchiveDataOperationCompleted);
            }
            this.InvokeAsync("SendEArchiveData", new object[] {
                        Ticket,
                        FileType,
                        InvoiceRawData,
                        CorporateCode,
                        MapCode}, this.SendEArchiveDataOperationCompleted, userState);
        }
        
        private void OnSendEArchiveDataOperationCompleted(object arg) {
            if ((this.SendEArchiveDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendEArchiveDataCompleted(this, new SendEArchiveDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendBase64StringEArchiveData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EArchiveStateResult SendBase64StringEArchiveData(string Ticket, string FileType, string InvoiceRawData, string CorporateCode, string MapCode) {
            object[] results = this.Invoke("SendBase64StringEArchiveData", new object[] {
                        Ticket,
                        FileType,
                        InvoiceRawData,
                        CorporateCode,
                        MapCode});
            return ((EArchiveStateResult)(results[0]));
        }
        
        /// <remarks/>
        public void SendBase64StringEArchiveDataAsync(string Ticket, string FileType, string InvoiceRawData, string CorporateCode, string MapCode) {
            this.SendBase64StringEArchiveDataAsync(Ticket, FileType, InvoiceRawData, CorporateCode, MapCode, null);
        }
        
        /// <remarks/>
        public void SendBase64StringEArchiveDataAsync(string Ticket, string FileType, string InvoiceRawData, string CorporateCode, string MapCode, object userState) {
            if ((this.SendBase64StringEArchiveDataOperationCompleted == null)) {
                this.SendBase64StringEArchiveDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendBase64StringEArchiveDataOperationCompleted);
            }
            this.InvokeAsync("SendBase64StringEArchiveData", new object[] {
                        Ticket,
                        FileType,
                        InvoiceRawData,
                        CorporateCode,
                        MapCode}, this.SendBase64StringEArchiveDataOperationCompleted, userState);
        }
        
        private void OnSendBase64StringEArchiveDataOperationCompleted(object arg) {
            if ((this.SendBase64StringEArchiveDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendBase64StringEArchiveDataCompleted(this, new SendBase64StringEArchiveDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ReSendInvoiceData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EnvelopeStateResult ReSendInvoiceData(string Ticket, string UUID, File FileType, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] InvoiceRawData, string CorporateCode, string MapCode, string ReceiverPostboxName) {
            object[] results = this.Invoke("ReSendInvoiceData", new object[] {
                        Ticket,
                        UUID,
                        FileType,
                        InvoiceRawData,
                        CorporateCode,
                        MapCode,
                        ReceiverPostboxName});
            return ((EnvelopeStateResult)(results[0]));
        }
        
        /// <remarks/>
        public void ReSendInvoiceDataAsync(string Ticket, string UUID, File FileType, byte[] InvoiceRawData, string CorporateCode, string MapCode, string ReceiverPostboxName) {
            this.ReSendInvoiceDataAsync(Ticket, UUID, FileType, InvoiceRawData, CorporateCode, MapCode, ReceiverPostboxName, null);
        }
        
        /// <remarks/>
        public void ReSendInvoiceDataAsync(string Ticket, string UUID, File FileType, byte[] InvoiceRawData, string CorporateCode, string MapCode, string ReceiverPostboxName, object userState) {
            if ((this.ReSendInvoiceDataOperationCompleted == null)) {
                this.ReSendInvoiceDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReSendInvoiceDataOperationCompleted);
            }
            this.InvokeAsync("ReSendInvoiceData", new object[] {
                        Ticket,
                        UUID,
                        FileType,
                        InvoiceRawData,
                        CorporateCode,
                        MapCode,
                        ReceiverPostboxName}, this.ReSendInvoiceDataOperationCompleted, userState);
        }
        
        private void OnReSendInvoiceDataOperationCompleted(object arg) {
            if ((this.ReSendInvoiceDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReSendInvoiceDataCompleted(this, new ReSendInvoiceDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendInvoiceDataWithTemplateCode", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EnvelopeStateResult SendInvoiceDataWithTemplateCode(string Ticket, File FileType, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] InvoiceRawData, string CorporateCode, string MapCode, string ReceiverPostboxName, string TemplateCode) {
            object[] results = this.Invoke("SendInvoiceDataWithTemplateCode", new object[] {
                        Ticket,
                        FileType,
                        InvoiceRawData,
                        CorporateCode,
                        MapCode,
                        ReceiverPostboxName,
                        TemplateCode});
            return ((EnvelopeStateResult)(results[0]));
        }
        
        /// <remarks/>
        public void SendInvoiceDataWithTemplateCodeAsync(string Ticket, File FileType, byte[] InvoiceRawData, string CorporateCode, string MapCode, string ReceiverPostboxName, string TemplateCode) {
            this.SendInvoiceDataWithTemplateCodeAsync(Ticket, FileType, InvoiceRawData, CorporateCode, MapCode, ReceiverPostboxName, TemplateCode, null);
        }
        
        /// <remarks/>
        public void SendInvoiceDataWithTemplateCodeAsync(string Ticket, File FileType, byte[] InvoiceRawData, string CorporateCode, string MapCode, string ReceiverPostboxName, string TemplateCode, object userState) {
            if ((this.SendInvoiceDataWithTemplateCodeOperationCompleted == null)) {
                this.SendInvoiceDataWithTemplateCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendInvoiceDataWithTemplateCodeOperationCompleted);
            }
            this.InvokeAsync("SendInvoiceDataWithTemplateCode", new object[] {
                        Ticket,
                        FileType,
                        InvoiceRawData,
                        CorporateCode,
                        MapCode,
                        ReceiverPostboxName,
                        TemplateCode}, this.SendInvoiceDataWithTemplateCodeOperationCompleted, userState);
        }
        
        private void OnSendInvoiceDataWithTemplateCodeOperationCompleted(object arg) {
            if ((this.SendInvoiceDataWithTemplateCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendInvoiceDataWithTemplateCodeCompleted(this, new SendInvoiceDataWithTemplateCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendEArchiveDataWithTemplateCode", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EArchiveStateResult SendEArchiveDataWithTemplateCode(string Ticket, File FileType, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] InvoiceRawData, string CorporateCode, string MapCode, string TemplateCode) {
            object[] results = this.Invoke("SendEArchiveDataWithTemplateCode", new object[] {
                        Ticket,
                        FileType,
                        InvoiceRawData,
                        CorporateCode,
                        MapCode,
                        TemplateCode});
            return ((EArchiveStateResult)(results[0]));
        }
        
        /// <remarks/>
        public void SendEArchiveDataWithTemplateCodeAsync(string Ticket, File FileType, byte[] InvoiceRawData, string CorporateCode, string MapCode, string TemplateCode) {
            this.SendEArchiveDataWithTemplateCodeAsync(Ticket, FileType, InvoiceRawData, CorporateCode, MapCode, TemplateCode, null);
        }
        
        /// <remarks/>
        public void SendEArchiveDataWithTemplateCodeAsync(string Ticket, File FileType, byte[] InvoiceRawData, string CorporateCode, string MapCode, string TemplateCode, object userState) {
            if ((this.SendEArchiveDataWithTemplateCodeOperationCompleted == null)) {
                this.SendEArchiveDataWithTemplateCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendEArchiveDataWithTemplateCodeOperationCompleted);
            }
            this.InvokeAsync("SendEArchiveDataWithTemplateCode", new object[] {
                        Ticket,
                        FileType,
                        InvoiceRawData,
                        CorporateCode,
                        MapCode,
                        TemplateCode}, this.SendEArchiveDataWithTemplateCodeOperationCompleted, userState);
        }
        
        private void OnSendEArchiveDataWithTemplateCodeOperationCompleted(object arg) {
            if ((this.SendEArchiveDataWithTemplateCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendEArchiveDataWithTemplateCodeCompleted(this, new SendEArchiveDataWithTemplateCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendBase64StringEArchiveDataWithTemplateCode", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EArchiveStateResult SendBase64StringEArchiveDataWithTemplateCode(string Ticket, string FileType, string InvoiceRawData, string CorporateCode, string MapCode, string TemplateCode) {
            object[] results = this.Invoke("SendBase64StringEArchiveDataWithTemplateCode", new object[] {
                        Ticket,
                        FileType,
                        InvoiceRawData,
                        CorporateCode,
                        MapCode,
                        TemplateCode});
            return ((EArchiveStateResult)(results[0]));
        }
        
        /// <remarks/>
        public void SendBase64StringEArchiveDataWithTemplateCodeAsync(string Ticket, string FileType, string InvoiceRawData, string CorporateCode, string MapCode, string TemplateCode) {
            this.SendBase64StringEArchiveDataWithTemplateCodeAsync(Ticket, FileType, InvoiceRawData, CorporateCode, MapCode, TemplateCode, null);
        }
        
        /// <remarks/>
        public void SendBase64StringEArchiveDataWithTemplateCodeAsync(string Ticket, string FileType, string InvoiceRawData, string CorporateCode, string MapCode, string TemplateCode, object userState) {
            if ((this.SendBase64StringEArchiveDataWithTemplateCodeOperationCompleted == null)) {
                this.SendBase64StringEArchiveDataWithTemplateCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendBase64StringEArchiveDataWithTemplateCodeOperationCompleted);
            }
            this.InvokeAsync("SendBase64StringEArchiveDataWithTemplateCode", new object[] {
                        Ticket,
                        FileType,
                        InvoiceRawData,
                        CorporateCode,
                        MapCode,
                        TemplateCode}, this.SendBase64StringEArchiveDataWithTemplateCodeOperationCompleted, userState);
        }
        
        private void OnSendBase64StringEArchiveDataWithTemplateCodeOperationCompleted(object arg) {
            if ((this.SendBase64StringEArchiveDataWithTemplateCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendBase64StringEArchiveDataWithTemplateCodeCompleted(this, new SendBase64StringEArchiveDataWithTemplateCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CancelEArchiveInvoice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InvoiceInfoResult CancelEArchiveInvoice(string Ticket, string Value, string Type, decimal TotalAmount, System.DateTime CancelDate) {
            object[] results = this.Invoke("CancelEArchiveInvoice", new object[] {
                        Ticket,
                        Value,
                        Type,
                        TotalAmount,
                        CancelDate});
            return ((InvoiceInfoResult)(results[0]));
        }
        
        /// <remarks/>
        public void CancelEArchiveInvoiceAsync(string Ticket, string Value, string Type, decimal TotalAmount, System.DateTime CancelDate) {
            this.CancelEArchiveInvoiceAsync(Ticket, Value, Type, TotalAmount, CancelDate, null);
        }
        
        /// <remarks/>
        public void CancelEArchiveInvoiceAsync(string Ticket, string Value, string Type, decimal TotalAmount, System.DateTime CancelDate, object userState) {
            if ((this.CancelEArchiveInvoiceOperationCompleted == null)) {
                this.CancelEArchiveInvoiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelEArchiveInvoiceOperationCompleted);
            }
            this.InvokeAsync("CancelEArchiveInvoice", new object[] {
                        Ticket,
                        Value,
                        Type,
                        TotalAmount,
                        CancelDate}, this.CancelEArchiveInvoiceOperationCompleted, userState);
        }
        
        private void OnCancelEArchiveInvoiceOperationCompleted(object arg) {
            if ((this.CancelEArchiveInvoiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelEArchiveInvoiceCompleted(this, new CancelEArchiveInvoiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CancelInvoiceNumber", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CancelInvoiceNumberResult CancelInvoiceNumber(string Ticket, string ReceiptBarcode, int Year) {
            object[] results = this.Invoke("CancelInvoiceNumber", new object[] {
                        Ticket,
                        ReceiptBarcode,
                        Year});
            return ((CancelInvoiceNumberResult)(results[0]));
        }
        
        /// <remarks/>
        public void CancelInvoiceNumberAsync(string Ticket, string ReceiptBarcode, int Year) {
            this.CancelInvoiceNumberAsync(Ticket, ReceiptBarcode, Year, null);
        }
        
        /// <remarks/>
        public void CancelInvoiceNumberAsync(string Ticket, string ReceiptBarcode, int Year, object userState) {
            if ((this.CancelInvoiceNumberOperationCompleted == null)) {
                this.CancelInvoiceNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelInvoiceNumberOperationCompleted);
            }
            this.InvokeAsync("CancelInvoiceNumber", new object[] {
                        Ticket,
                        ReceiptBarcode,
                        Year}, this.CancelInvoiceNumberOperationCompleted, userState);
        }
        
        private void OnCancelInvoiceNumberOperationCompleted(object arg) {
            if ((this.CancelInvoiceNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelInvoiceNumberCompleted(this, new CancelInvoiceNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CancelEArchiveInvoiceStringDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InvoiceInfoResult CancelEArchiveInvoiceStringDate(string Ticket, string Value, string Type, decimal TotalAmount, string CancelDate) {
            object[] results = this.Invoke("CancelEArchiveInvoiceStringDate", new object[] {
                        Ticket,
                        Value,
                        Type,
                        TotalAmount,
                        CancelDate});
            return ((InvoiceInfoResult)(results[0]));
        }
        
        /// <remarks/>
        public void CancelEArchiveInvoiceStringDateAsync(string Ticket, string Value, string Type, decimal TotalAmount, string CancelDate) {
            this.CancelEArchiveInvoiceStringDateAsync(Ticket, Value, Type, TotalAmount, CancelDate, null);
        }
        
        /// <remarks/>
        public void CancelEArchiveInvoiceStringDateAsync(string Ticket, string Value, string Type, decimal TotalAmount, string CancelDate, object userState) {
            if ((this.CancelEArchiveInvoiceStringDateOperationCompleted == null)) {
                this.CancelEArchiveInvoiceStringDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelEArchiveInvoiceStringDateOperationCompleted);
            }
            this.InvokeAsync("CancelEArchiveInvoiceStringDate", new object[] {
                        Ticket,
                        Value,
                        Type,
                        TotalAmount,
                        CancelDate}, this.CancelEArchiveInvoiceStringDateOperationCompleted, userState);
        }
        
        private void OnCancelEArchiveInvoiceStringDateOperationCompleted(object arg) {
            if ((this.CancelEArchiveInvoiceStringDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelEArchiveInvoiceStringDateCompleted(this, new CancelEArchiveInvoiceStringDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CancelEArchiveInvoiceStringDateAndAmount", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InvoiceInfoResult CancelEArchiveInvoiceStringDateAndAmount(string Ticket, string Value, string Type, string TotalAmount, string CancelDate) {
            object[] results = this.Invoke("CancelEArchiveInvoiceStringDateAndAmount", new object[] {
                        Ticket,
                        Value,
                        Type,
                        TotalAmount,
                        CancelDate});
            return ((InvoiceInfoResult)(results[0]));
        }
        
        /// <remarks/>
        public void CancelEArchiveInvoiceStringDateAndAmountAsync(string Ticket, string Value, string Type, string TotalAmount, string CancelDate) {
            this.CancelEArchiveInvoiceStringDateAndAmountAsync(Ticket, Value, Type, TotalAmount, CancelDate, null);
        }
        
        /// <remarks/>
        public void CancelEArchiveInvoiceStringDateAndAmountAsync(string Ticket, string Value, string Type, string TotalAmount, string CancelDate, object userState) {
            if ((this.CancelEArchiveInvoiceStringDateAndAmountOperationCompleted == null)) {
                this.CancelEArchiveInvoiceStringDateAndAmountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelEArchiveInvoiceStringDateAndAmountOperationCompleted);
            }
            this.InvokeAsync("CancelEArchiveInvoiceStringDateAndAmount", new object[] {
                        Ticket,
                        Value,
                        Type,
                        TotalAmount,
                        CancelDate}, this.CancelEArchiveInvoiceStringDateAndAmountOperationCompleted, userState);
        }
        
        private void OnCancelEArchiveInvoiceStringDateAndAmountOperationCompleted(object arg) {
            if ((this.CancelEArchiveInvoiceStringDateAndAmountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelEArchiveInvoiceStringDateAndAmountCompleted(this, new CancelEArchiveInvoiceStringDateAndAmountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendBase64StringInvoice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EnvelopeStateResult SendBase64StringInvoice(string Ticket, string FileType, string InvoiceRawData, string CorporateCode, string MapCode, string ReceiverPostboxName) {
            object[] results = this.Invoke("SendBase64StringInvoice", new object[] {
                        Ticket,
                        FileType,
                        InvoiceRawData,
                        CorporateCode,
                        MapCode,
                        ReceiverPostboxName});
            return ((EnvelopeStateResult)(results[0]));
        }
        
        /// <remarks/>
        public void SendBase64StringInvoiceAsync(string Ticket, string FileType, string InvoiceRawData, string CorporateCode, string MapCode, string ReceiverPostboxName) {
            this.SendBase64StringInvoiceAsync(Ticket, FileType, InvoiceRawData, CorporateCode, MapCode, ReceiverPostboxName, null);
        }
        
        /// <remarks/>
        public void SendBase64StringInvoiceAsync(string Ticket, string FileType, string InvoiceRawData, string CorporateCode, string MapCode, string ReceiverPostboxName, object userState) {
            if ((this.SendBase64StringInvoiceOperationCompleted == null)) {
                this.SendBase64StringInvoiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendBase64StringInvoiceOperationCompleted);
            }
            this.InvokeAsync("SendBase64StringInvoice", new object[] {
                        Ticket,
                        FileType,
                        InvoiceRawData,
                        CorporateCode,
                        MapCode,
                        ReceiverPostboxName}, this.SendBase64StringInvoiceOperationCompleted, userState);
        }
        
        private void OnSendBase64StringInvoiceOperationCompleted(object arg) {
            if ((this.SendBase64StringInvoiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendBase64StringInvoiceCompleted(this, new SendBase64StringInvoiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendBase64StringInvoiceWithTemplateCode", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EnvelopeStateResult SendBase64StringInvoiceWithTemplateCode(string Ticket, string FileType, string InvoiceRawData, string CorporateCode, string MapCode, string ReceiverPostboxName, string TemplateCode) {
            object[] results = this.Invoke("SendBase64StringInvoiceWithTemplateCode", new object[] {
                        Ticket,
                        FileType,
                        InvoiceRawData,
                        CorporateCode,
                        MapCode,
                        ReceiverPostboxName,
                        TemplateCode});
            return ((EnvelopeStateResult)(results[0]));
        }
        
        /// <remarks/>
        public void SendBase64StringInvoiceWithTemplateCodeAsync(string Ticket, string FileType, string InvoiceRawData, string CorporateCode, string MapCode, string ReceiverPostboxName, string TemplateCode) {
            this.SendBase64StringInvoiceWithTemplateCodeAsync(Ticket, FileType, InvoiceRawData, CorporateCode, MapCode, ReceiverPostboxName, TemplateCode, null);
        }
        
        /// <remarks/>
        public void SendBase64StringInvoiceWithTemplateCodeAsync(string Ticket, string FileType, string InvoiceRawData, string CorporateCode, string MapCode, string ReceiverPostboxName, string TemplateCode, object userState) {
            if ((this.SendBase64StringInvoiceWithTemplateCodeOperationCompleted == null)) {
                this.SendBase64StringInvoiceWithTemplateCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendBase64StringInvoiceWithTemplateCodeOperationCompleted);
            }
            this.InvokeAsync("SendBase64StringInvoiceWithTemplateCode", new object[] {
                        Ticket,
                        FileType,
                        InvoiceRawData,
                        CorporateCode,
                        MapCode,
                        ReceiverPostboxName,
                        TemplateCode}, this.SendBase64StringInvoiceWithTemplateCodeOperationCompleted, userState);
        }
        
        private void OnSendBase64StringInvoiceWithTemplateCodeOperationCompleted(object arg) {
            if ((this.SendBase64StringInvoiceWithTemplateCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendBase64StringInvoiceWithTemplateCodeCompleted(this, new SendBase64StringInvoiceWithTemplateCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendXmlInvoice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EnvelopeStateResult SendXmlInvoice(string Ticket, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] InvoiceRawData, string CorporateCode, string MapCode, string ReceiverPostboxName) {
            object[] results = this.Invoke("SendXmlInvoice", new object[] {
                        Ticket,
                        InvoiceRawData,
                        CorporateCode,
                        MapCode,
                        ReceiverPostboxName});
            return ((EnvelopeStateResult)(results[0]));
        }
        
        /// <remarks/>
        public void SendXmlInvoiceAsync(string Ticket, byte[] InvoiceRawData, string CorporateCode, string MapCode, string ReceiverPostboxName) {
            this.SendXmlInvoiceAsync(Ticket, InvoiceRawData, CorporateCode, MapCode, ReceiverPostboxName, null);
        }
        
        /// <remarks/>
        public void SendXmlInvoiceAsync(string Ticket, byte[] InvoiceRawData, string CorporateCode, string MapCode, string ReceiverPostboxName, object userState) {
            if ((this.SendXmlInvoiceOperationCompleted == null)) {
                this.SendXmlInvoiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendXmlInvoiceOperationCompleted);
            }
            this.InvokeAsync("SendXmlInvoice", new object[] {
                        Ticket,
                        InvoiceRawData,
                        CorporateCode,
                        MapCode,
                        ReceiverPostboxName}, this.SendXmlInvoiceOperationCompleted, userState);
        }
        
        private void OnSendXmlInvoiceOperationCompleted(object arg) {
            if ((this.SendXmlInvoiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendXmlInvoiceCompleted(this, new SendXmlInvoiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendUBLInvoice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EnvelopeStateResult SendUBLInvoice(string Ticket, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] InvoiceRawData, string CorporateCode, string MapCode, string ReceiverPostboxName) {
            object[] results = this.Invoke("SendUBLInvoice", new object[] {
                        Ticket,
                        InvoiceRawData,
                        CorporateCode,
                        MapCode,
                        ReceiverPostboxName});
            return ((EnvelopeStateResult)(results[0]));
        }
        
        /// <remarks/>
        public void SendUBLInvoiceAsync(string Ticket, byte[] InvoiceRawData, string CorporateCode, string MapCode, string ReceiverPostboxName) {
            this.SendUBLInvoiceAsync(Ticket, InvoiceRawData, CorporateCode, MapCode, ReceiverPostboxName, null);
        }
        
        /// <remarks/>
        public void SendUBLInvoiceAsync(string Ticket, byte[] InvoiceRawData, string CorporateCode, string MapCode, string ReceiverPostboxName, object userState) {
            if ((this.SendUBLInvoiceOperationCompleted == null)) {
                this.SendUBLInvoiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendUBLInvoiceOperationCompleted);
            }
            this.InvokeAsync("SendUBLInvoice", new object[] {
                        Ticket,
                        InvoiceRawData,
                        CorporateCode,
                        MapCode,
                        ReceiverPostboxName}, this.SendUBLInvoiceOperationCompleted, userState);
        }
        
        private void OnSendUBLInvoiceOperationCompleted(object arg) {
            if ((this.SendUBLInvoiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendUBLInvoiceCompleted(this, new SendUBLInvoiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadFromArchiveOutgoing", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EnvelopeStateResult UploadFromArchiveOutgoing(string Ticket, string InvoiceRawData, string CorporateCode, string ReceiverPostboxName) {
            object[] results = this.Invoke("UploadFromArchiveOutgoing", new object[] {
                        Ticket,
                        InvoiceRawData,
                        CorporateCode,
                        ReceiverPostboxName});
            return ((EnvelopeStateResult)(results[0]));
        }
        
        /// <remarks/>
        public void UploadFromArchiveOutgoingAsync(string Ticket, string InvoiceRawData, string CorporateCode, string ReceiverPostboxName) {
            this.UploadFromArchiveOutgoingAsync(Ticket, InvoiceRawData, CorporateCode, ReceiverPostboxName, null);
        }
        
        /// <remarks/>
        public void UploadFromArchiveOutgoingAsync(string Ticket, string InvoiceRawData, string CorporateCode, string ReceiverPostboxName, object userState) {
            if ((this.UploadFromArchiveOutgoingOperationCompleted == null)) {
                this.UploadFromArchiveOutgoingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadFromArchiveOutgoingOperationCompleted);
            }
            this.InvokeAsync("UploadFromArchiveOutgoing", new object[] {
                        Ticket,
                        InvoiceRawData,
                        CorporateCode,
                        ReceiverPostboxName}, this.UploadFromArchiveOutgoingOperationCompleted, userState);
        }
        
        private void OnUploadFromArchiveOutgoingOperationCompleted(object arg) {
            if ((this.UploadFromArchiveOutgoingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadFromArchiveOutgoingCompleted(this, new UploadFromArchiveOutgoingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadFromArchiveUBLOutgoing", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EnvelopeStateResult UploadFromArchiveUBLOutgoing(string Ticket, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] InvoiceRawData, string CorporateCode, string ReceiverPostboxName) {
            object[] results = this.Invoke("UploadFromArchiveUBLOutgoing", new object[] {
                        Ticket,
                        InvoiceRawData,
                        CorporateCode,
                        ReceiverPostboxName});
            return ((EnvelopeStateResult)(results[0]));
        }
        
        /// <remarks/>
        public void UploadFromArchiveUBLOutgoingAsync(string Ticket, byte[] InvoiceRawData, string CorporateCode, string ReceiverPostboxName) {
            this.UploadFromArchiveUBLOutgoingAsync(Ticket, InvoiceRawData, CorporateCode, ReceiverPostboxName, null);
        }
        
        /// <remarks/>
        public void UploadFromArchiveUBLOutgoingAsync(string Ticket, byte[] InvoiceRawData, string CorporateCode, string ReceiverPostboxName, object userState) {
            if ((this.UploadFromArchiveUBLOutgoingOperationCompleted == null)) {
                this.UploadFromArchiveUBLOutgoingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadFromArchiveUBLOutgoingOperationCompleted);
            }
            this.InvokeAsync("UploadFromArchiveUBLOutgoing", new object[] {
                        Ticket,
                        InvoiceRawData,
                        CorporateCode,
                        ReceiverPostboxName}, this.UploadFromArchiveUBLOutgoingOperationCompleted, userState);
        }
        
        private void OnUploadFromArchiveUBLOutgoingOperationCompleted(object arg) {
            if ((this.UploadFromArchiveUBLOutgoingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadFromArchiveUBLOutgoingCompleted(this, new UploadFromArchiveUBLOutgoingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadFromArchiveEnvelopeOutgoing", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EnvelopeStateResult UploadFromArchiveEnvelopeOutgoing(string Ticket, string Envelope, string CorporateCode) {
            object[] results = this.Invoke("UploadFromArchiveEnvelopeOutgoing", new object[] {
                        Ticket,
                        Envelope,
                        CorporateCode});
            return ((EnvelopeStateResult)(results[0]));
        }
        
        /// <remarks/>
        public void UploadFromArchiveEnvelopeOutgoingAsync(string Ticket, string Envelope, string CorporateCode) {
            this.UploadFromArchiveEnvelopeOutgoingAsync(Ticket, Envelope, CorporateCode, null);
        }
        
        /// <remarks/>
        public void UploadFromArchiveEnvelopeOutgoingAsync(string Ticket, string Envelope, string CorporateCode, object userState) {
            if ((this.UploadFromArchiveEnvelopeOutgoingOperationCompleted == null)) {
                this.UploadFromArchiveEnvelopeOutgoingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadFromArchiveEnvelopeOutgoingOperationCompleted);
            }
            this.InvokeAsync("UploadFromArchiveEnvelopeOutgoing", new object[] {
                        Ticket,
                        Envelope,
                        CorporateCode}, this.UploadFromArchiveEnvelopeOutgoingOperationCompleted, userState);
        }
        
        private void OnUploadFromArchiveEnvelopeOutgoingOperationCompleted(object arg) {
            if ((this.UploadFromArchiveEnvelopeOutgoingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadFromArchiveEnvelopeOutgoingCompleted(this, new UploadFromArchiveEnvelopeOutgoingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadFromArchiveIncoming", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EnvelopeStateResult UploadFromArchiveIncoming(string Ticket, string data, string instanceidentifier, string CorporateCode) {
            object[] results = this.Invoke("UploadFromArchiveIncoming", new object[] {
                        Ticket,
                        data,
                        instanceidentifier,
                        CorporateCode});
            return ((EnvelopeStateResult)(results[0]));
        }
        
        /// <remarks/>
        public void UploadFromArchiveIncomingAsync(string Ticket, string data, string instanceidentifier, string CorporateCode) {
            this.UploadFromArchiveIncomingAsync(Ticket, data, instanceidentifier, CorporateCode, null);
        }
        
        /// <remarks/>
        public void UploadFromArchiveIncomingAsync(string Ticket, string data, string instanceidentifier, string CorporateCode, object userState) {
            if ((this.UploadFromArchiveIncomingOperationCompleted == null)) {
                this.UploadFromArchiveIncomingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadFromArchiveIncomingOperationCompleted);
            }
            this.InvokeAsync("UploadFromArchiveIncoming", new object[] {
                        Ticket,
                        data,
                        instanceidentifier,
                        CorporateCode}, this.UploadFromArchiveIncomingOperationCompleted, userState);
        }
        
        private void OnUploadFromArchiveIncomingOperationCompleted(object arg) {
            if ((this.UploadFromArchiveIncomingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadFromArchiveIncomingCompleted(this, new UploadFromArchiveIncomingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadFromArchiveUBLIncoming", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EnvelopeStateResult UploadFromArchiveUBLIncoming(string Ticket, string Ubl, string instanceidentifier, string CorporateCode) {
            object[] results = this.Invoke("UploadFromArchiveUBLIncoming", new object[] {
                        Ticket,
                        Ubl,
                        instanceidentifier,
                        CorporateCode});
            return ((EnvelopeStateResult)(results[0]));
        }
        
        /// <remarks/>
        public void UploadFromArchiveUBLIncomingAsync(string Ticket, string Ubl, string instanceidentifier, string CorporateCode) {
            this.UploadFromArchiveUBLIncomingAsync(Ticket, Ubl, instanceidentifier, CorporateCode, null);
        }
        
        /// <remarks/>
        public void UploadFromArchiveUBLIncomingAsync(string Ticket, string Ubl, string instanceidentifier, string CorporateCode, object userState) {
            if ((this.UploadFromArchiveUBLIncomingOperationCompleted == null)) {
                this.UploadFromArchiveUBLIncomingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadFromArchiveUBLIncomingOperationCompleted);
            }
            this.InvokeAsync("UploadFromArchiveUBLIncoming", new object[] {
                        Ticket,
                        Ubl,
                        instanceidentifier,
                        CorporateCode}, this.UploadFromArchiveUBLIncomingOperationCompleted, userState);
        }
        
        private void OnUploadFromArchiveUBLIncomingOperationCompleted(object arg) {
            if ((this.UploadFromArchiveUBLIncomingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadFromArchiveUBLIncomingCompleted(this, new UploadFromArchiveUBLIncomingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadFromArchiveEnvelopeIncoming", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EnvelopeStateResult UploadFromArchiveEnvelopeIncoming(string Ticket, string Envelope, string CorporateCode) {
            object[] results = this.Invoke("UploadFromArchiveEnvelopeIncoming", new object[] {
                        Ticket,
                        Envelope,
                        CorporateCode});
            return ((EnvelopeStateResult)(results[0]));
        }
        
        /// <remarks/>
        public void UploadFromArchiveEnvelopeIncomingAsync(string Ticket, string Envelope, string CorporateCode) {
            this.UploadFromArchiveEnvelopeIncomingAsync(Ticket, Envelope, CorporateCode, null);
        }
        
        /// <remarks/>
        public void UploadFromArchiveEnvelopeIncomingAsync(string Ticket, string Envelope, string CorporateCode, object userState) {
            if ((this.UploadFromArchiveEnvelopeIncomingOperationCompleted == null)) {
                this.UploadFromArchiveEnvelopeIncomingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadFromArchiveEnvelopeIncomingOperationCompleted);
            }
            this.InvokeAsync("UploadFromArchiveEnvelopeIncoming", new object[] {
                        Ticket,
                        Envelope,
                        CorporateCode}, this.UploadFromArchiveEnvelopeIncomingOperationCompleted, userState);
        }
        
        private void OnUploadFromArchiveEnvelopeIncomingOperationCompleted(object arg) {
            if ((this.UploadFromArchiveEnvelopeIncomingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadFromArchiveEnvelopeIncomingCompleted(this, new UploadFromArchiveEnvelopeIncomingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendCumulativeInvoiceData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EnvelopeStateResult[] SendCumulativeInvoiceData(string Ticket, File FileType, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] InvoiceRawData, string CorporateCode, string MapCode, string ReceiverPostboxName) {
            object[] results = this.Invoke("SendCumulativeInvoiceData", new object[] {
                        Ticket,
                        FileType,
                        InvoiceRawData,
                        CorporateCode,
                        MapCode,
                        ReceiverPostboxName});
            return ((EnvelopeStateResult[])(results[0]));
        }
        
        /// <remarks/>
        public void SendCumulativeInvoiceDataAsync(string Ticket, File FileType, byte[] InvoiceRawData, string CorporateCode, string MapCode, string ReceiverPostboxName) {
            this.SendCumulativeInvoiceDataAsync(Ticket, FileType, InvoiceRawData, CorporateCode, MapCode, ReceiverPostboxName, null);
        }
        
        /// <remarks/>
        public void SendCumulativeInvoiceDataAsync(string Ticket, File FileType, byte[] InvoiceRawData, string CorporateCode, string MapCode, string ReceiverPostboxName, object userState) {
            if ((this.SendCumulativeInvoiceDataOperationCompleted == null)) {
                this.SendCumulativeInvoiceDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendCumulativeInvoiceDataOperationCompleted);
            }
            this.InvokeAsync("SendCumulativeInvoiceData", new object[] {
                        Ticket,
                        FileType,
                        InvoiceRawData,
                        CorporateCode,
                        MapCode,
                        ReceiverPostboxName}, this.SendCumulativeInvoiceDataOperationCompleted, userState);
        }
        
        private void OnSendCumulativeInvoiceDataOperationCompleted(object arg) {
            if ((this.SendCumulativeInvoiceDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendCumulativeInvoiceDataCompleted(this, new SendCumulativeInvoiceDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckGibStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GibStatusResult CheckGibStatus(string Ticket, string Guid, string GuidType) {
            object[] results = this.Invoke("CheckGibStatus", new object[] {
                        Ticket,
                        Guid,
                        GuidType});
            return ((GibStatusResult)(results[0]));
        }
        
        /// <remarks/>
        public void CheckGibStatusAsync(string Ticket, string Guid, string GuidType) {
            this.CheckGibStatusAsync(Ticket, Guid, GuidType, null);
        }
        
        /// <remarks/>
        public void CheckGibStatusAsync(string Ticket, string Guid, string GuidType, object userState) {
            if ((this.CheckGibStatusOperationCompleted == null)) {
                this.CheckGibStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckGibStatusOperationCompleted);
            }
            this.InvokeAsync("CheckGibStatus", new object[] {
                        Ticket,
                        Guid,
                        GuidType}, this.CheckGibStatusOperationCompleted, userState);
        }
        
        private void OnCheckGibStatusOperationCompleted(object arg) {
            if ((this.CheckGibStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckGibStatusCompleted(this, new CheckGibStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetEInvoiceSenderListUpdates", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EInvoiceCustomerListUpdateResult GetEInvoiceSenderListUpdates(string Ticket, System.DateTime StartDate, System.DateTime EndDate) {
            object[] results = this.Invoke("GetEInvoiceSenderListUpdates", new object[] {
                        Ticket,
                        StartDate,
                        EndDate});
            return ((EInvoiceCustomerListUpdateResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetEInvoiceSenderListUpdatesAsync(string Ticket, System.DateTime StartDate, System.DateTime EndDate) {
            this.GetEInvoiceSenderListUpdatesAsync(Ticket, StartDate, EndDate, null);
        }
        
        /// <remarks/>
        public void GetEInvoiceSenderListUpdatesAsync(string Ticket, System.DateTime StartDate, System.DateTime EndDate, object userState) {
            if ((this.GetEInvoiceSenderListUpdatesOperationCompleted == null)) {
                this.GetEInvoiceSenderListUpdatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEInvoiceSenderListUpdatesOperationCompleted);
            }
            this.InvokeAsync("GetEInvoiceSenderListUpdates", new object[] {
                        Ticket,
                        StartDate,
                        EndDate}, this.GetEInvoiceSenderListUpdatesOperationCompleted, userState);
        }
        
        private void OnGetEInvoiceSenderListUpdatesOperationCompleted(object arg) {
            if ((this.GetEInvoiceSenderListUpdatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEInvoiceSenderListUpdatesCompleted(this, new GetEInvoiceSenderListUpdatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetEInvoiceReceiverListUpdates", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EInvoiceCustomerListUpdateResult GetEInvoiceReceiverListUpdates(string Ticket, System.DateTime StartDate, System.DateTime EndDate) {
            object[] results = this.Invoke("GetEInvoiceReceiverListUpdates", new object[] {
                        Ticket,
                        StartDate,
                        EndDate});
            return ((EInvoiceCustomerListUpdateResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetEInvoiceReceiverListUpdatesAsync(string Ticket, System.DateTime StartDate, System.DateTime EndDate) {
            this.GetEInvoiceReceiverListUpdatesAsync(Ticket, StartDate, EndDate, null);
        }
        
        /// <remarks/>
        public void GetEInvoiceReceiverListUpdatesAsync(string Ticket, System.DateTime StartDate, System.DateTime EndDate, object userState) {
            if ((this.GetEInvoiceReceiverListUpdatesOperationCompleted == null)) {
                this.GetEInvoiceReceiverListUpdatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEInvoiceReceiverListUpdatesOperationCompleted);
            }
            this.InvokeAsync("GetEInvoiceReceiverListUpdates", new object[] {
                        Ticket,
                        StartDate,
                        EndDate}, this.GetEInvoiceReceiverListUpdatesOperationCompleted, userState);
        }
        
        private void OnGetEInvoiceReceiverListUpdatesOperationCompleted(object arg) {
            if ((this.GetEInvoiceReceiverListUpdatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEInvoiceReceiverListUpdatesCompleted(this, new GetEInvoiceReceiverListUpdatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AcceptInvoice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResponseResult AcceptInvoice(string Ticket, string UUID) {
            object[] results = this.Invoke("AcceptInvoice", new object[] {
                        Ticket,
                        UUID});
            return ((ResponseResult)(results[0]));
        }
        
        /// <remarks/>
        public void AcceptInvoiceAsync(string Ticket, string UUID) {
            this.AcceptInvoiceAsync(Ticket, UUID, null);
        }
        
        /// <remarks/>
        public void AcceptInvoiceAsync(string Ticket, string UUID, object userState) {
            if ((this.AcceptInvoiceOperationCompleted == null)) {
                this.AcceptInvoiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAcceptInvoiceOperationCompleted);
            }
            this.InvokeAsync("AcceptInvoice", new object[] {
                        Ticket,
                        UUID}, this.AcceptInvoiceOperationCompleted, userState);
        }
        
        private void OnAcceptInvoiceOperationCompleted(object arg) {
            if ((this.AcceptInvoiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AcceptInvoiceCompleted(this, new AcceptInvoiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RejectInvoice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResponseResult RejectInvoice(string Ticket, string UUID, string Description) {
            object[] results = this.Invoke("RejectInvoice", new object[] {
                        Ticket,
                        UUID,
                        Description});
            return ((ResponseResult)(results[0]));
        }
        
        /// <remarks/>
        public void RejectInvoiceAsync(string Ticket, string UUID, string Description) {
            this.RejectInvoiceAsync(Ticket, UUID, Description, null);
        }
        
        /// <remarks/>
        public void RejectInvoiceAsync(string Ticket, string UUID, string Description, object userState) {
            if ((this.RejectInvoiceOperationCompleted == null)) {
                this.RejectInvoiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRejectInvoiceOperationCompleted);
            }
            this.InvokeAsync("RejectInvoice", new object[] {
                        Ticket,
                        UUID,
                        Description}, this.RejectInvoiceOperationCompleted, userState);
        }
        
        private void OnRejectInvoiceOperationCompleted(object arg) {
            if ((this.RejectInvoiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RejectInvoiceCompleted(this, new RejectInvoiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RejectInvoiceWithNotify", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResponseResult RejectInvoiceWithNotify(string Ticket, string UUID, string Description, string NotifyType) {
            object[] results = this.Invoke("RejectInvoiceWithNotify", new object[] {
                        Ticket,
                        UUID,
                        Description,
                        NotifyType});
            return ((ResponseResult)(results[0]));
        }
        
        /// <remarks/>
        public void RejectInvoiceWithNotifyAsync(string Ticket, string UUID, string Description, string NotifyType) {
            this.RejectInvoiceWithNotifyAsync(Ticket, UUID, Description, NotifyType, null);
        }
        
        /// <remarks/>
        public void RejectInvoiceWithNotifyAsync(string Ticket, string UUID, string Description, string NotifyType, object userState) {
            if ((this.RejectInvoiceWithNotifyOperationCompleted == null)) {
                this.RejectInvoiceWithNotifyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRejectInvoiceWithNotifyOperationCompleted);
            }
            this.InvokeAsync("RejectInvoiceWithNotify", new object[] {
                        Ticket,
                        UUID,
                        Description,
                        NotifyType}, this.RejectInvoiceWithNotifyOperationCompleted, userState);
        }
        
        private void OnRejectInvoiceWithNotifyOperationCompleted(object arg) {
            if ((this.RejectInvoiceWithNotifyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RejectInvoiceWithNotifyCompleted(this, new RejectInvoiceWithNotifyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckInvoiceState", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InvoiceStateResult CheckInvoiceState(string Ticket, string UUID) {
            object[] results = this.Invoke("CheckInvoiceState", new object[] {
                        Ticket,
                        UUID});
            return ((InvoiceStateResult)(results[0]));
        }
        
        /// <remarks/>
        public void CheckInvoiceStateAsync(string Ticket, string UUID) {
            this.CheckInvoiceStateAsync(Ticket, UUID, null);
        }
        
        /// <remarks/>
        public void CheckInvoiceStateAsync(string Ticket, string UUID, object userState) {
            if ((this.CheckInvoiceStateOperationCompleted == null)) {
                this.CheckInvoiceStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckInvoiceStateOperationCompleted);
            }
            this.InvokeAsync("CheckInvoiceState", new object[] {
                        Ticket,
                        UUID}, this.CheckInvoiceStateOperationCompleted, userState);
        }
        
        private void OnCheckInvoiceStateOperationCompleted(object arg) {
            if ((this.CheckInvoiceStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckInvoiceStateCompleted(this, new CheckInvoiceStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAvailableInvoiceReturnStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InvoiceStateResult GetAvailableInvoiceReturnStatus(string Ticket, string UUID) {
            object[] results = this.Invoke("GetAvailableInvoiceReturnStatus", new object[] {
                        Ticket,
                        UUID});
            return ((InvoiceStateResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvailableInvoiceReturnStatusAsync(string Ticket, string UUID) {
            this.GetAvailableInvoiceReturnStatusAsync(Ticket, UUID, null);
        }
        
        /// <remarks/>
        public void GetAvailableInvoiceReturnStatusAsync(string Ticket, string UUID, object userState) {
            if ((this.GetAvailableInvoiceReturnStatusOperationCompleted == null)) {
                this.GetAvailableInvoiceReturnStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvailableInvoiceReturnStatusOperationCompleted);
            }
            this.InvokeAsync("GetAvailableInvoiceReturnStatus", new object[] {
                        Ticket,
                        UUID}, this.GetAvailableInvoiceReturnStatusOperationCompleted, userState);
        }
        
        private void OnGetAvailableInvoiceReturnStatusOperationCompleted(object arg) {
            if ((this.GetAvailableInvoiceReturnStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvailableInvoiceReturnStatusCompleted(this, new GetAvailableInvoiceReturnStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetInvoiceByInvoiceID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InvoicePackResult GetInvoiceByInvoiceID(string Ticket, string InvoiceID, Direction Direction) {
            object[] results = this.Invoke("GetInvoiceByInvoiceID", new object[] {
                        Ticket,
                        InvoiceID,
                        Direction});
            return ((InvoicePackResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetInvoiceByInvoiceIDAsync(string Ticket, string InvoiceID, Direction Direction) {
            this.GetInvoiceByInvoiceIDAsync(Ticket, InvoiceID, Direction, null);
        }
        
        /// <remarks/>
        public void GetInvoiceByInvoiceIDAsync(string Ticket, string InvoiceID, Direction Direction, object userState) {
            if ((this.GetInvoiceByInvoiceIDOperationCompleted == null)) {
                this.GetInvoiceByInvoiceIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInvoiceByInvoiceIDOperationCompleted);
            }
            this.InvokeAsync("GetInvoiceByInvoiceID", new object[] {
                        Ticket,
                        InvoiceID,
                        Direction}, this.GetInvoiceByInvoiceIDOperationCompleted, userState);
        }
        
        private void OnGetInvoiceByInvoiceIDOperationCompleted(object arg) {
            if ((this.GetInvoiceByInvoiceIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInvoiceByInvoiceIDCompleted(this, new GetInvoiceByInvoiceIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetInboundInvoiceByMapCode", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InvoiceInfoResult GetInboundInvoiceByMapCode(string Ticket, string UUID, string MapCode) {
            object[] results = this.Invoke("GetInboundInvoiceByMapCode", new object[] {
                        Ticket,
                        UUID,
                        MapCode});
            return ((InvoiceInfoResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetInboundInvoiceByMapCodeAsync(string Ticket, string UUID, string MapCode) {
            this.GetInboundInvoiceByMapCodeAsync(Ticket, UUID, MapCode, null);
        }
        
        /// <remarks/>
        public void GetInboundInvoiceByMapCodeAsync(string Ticket, string UUID, string MapCode, object userState) {
            if ((this.GetInboundInvoiceByMapCodeOperationCompleted == null)) {
                this.GetInboundInvoiceByMapCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInboundInvoiceByMapCodeOperationCompleted);
            }
            this.InvokeAsync("GetInboundInvoiceByMapCode", new object[] {
                        Ticket,
                        UUID,
                        MapCode}, this.GetInboundInvoiceByMapCodeOperationCompleted, userState);
        }
        
        private void OnGetInboundInvoiceByMapCodeOperationCompleted(object arg) {
            if ((this.GetInboundInvoiceByMapCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInboundInvoiceByMapCodeCompleted(this, new GetInboundInvoiceByMapCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckEArchiveInvoiceState", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EArchiveInvoiceStateResult CheckEArchiveInvoiceState(string Ticket, string InvoiceNumber, string InvoiceNumberType) {
            object[] results = this.Invoke("CheckEArchiveInvoiceState", new object[] {
                        Ticket,
                        InvoiceNumber,
                        InvoiceNumberType});
            return ((EArchiveInvoiceStateResult)(results[0]));
        }
        
        /// <remarks/>
        public void CheckEArchiveInvoiceStateAsync(string Ticket, string InvoiceNumber, string InvoiceNumberType) {
            this.CheckEArchiveInvoiceStateAsync(Ticket, InvoiceNumber, InvoiceNumberType, null);
        }
        
        /// <remarks/>
        public void CheckEArchiveInvoiceStateAsync(string Ticket, string InvoiceNumber, string InvoiceNumberType, object userState) {
            if ((this.CheckEArchiveInvoiceStateOperationCompleted == null)) {
                this.CheckEArchiveInvoiceStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckEArchiveInvoiceStateOperationCompleted);
            }
            this.InvokeAsync("CheckEArchiveInvoiceState", new object[] {
                        Ticket,
                        InvoiceNumber,
                        InvoiceNumberType}, this.CheckEArchiveInvoiceStateOperationCompleted, userState);
        }
        
        private void OnCheckEArchiveInvoiceStateOperationCompleted(object arg) {
            if ((this.CheckEArchiveInvoiceStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckEArchiveInvoiceStateCompleted(this, new CheckEArchiveInvoiceStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckEArchiveReportState", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EArchiveReportStateResult CheckEArchiveReportState(string Ticket, string ReportNo) {
            object[] results = this.Invoke("CheckEArchiveReportState", new object[] {
                        Ticket,
                        ReportNo});
            return ((EArchiveReportStateResult)(results[0]));
        }
        
        /// <remarks/>
        public void CheckEArchiveReportStateAsync(string Ticket, string ReportNo) {
            this.CheckEArchiveReportStateAsync(Ticket, ReportNo, null);
        }
        
        /// <remarks/>
        public void CheckEArchiveReportStateAsync(string Ticket, string ReportNo, object userState) {
            if ((this.CheckEArchiveReportStateOperationCompleted == null)) {
                this.CheckEArchiveReportStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckEArchiveReportStateOperationCompleted);
            }
            this.InvokeAsync("CheckEArchiveReportState", new object[] {
                        Ticket,
                        ReportNo}, this.CheckEArchiveReportStateOperationCompleted, userState);
        }
        
        private void OnCheckEArchiveReportStateOperationCompleted(object arg) {
            if ((this.CheckEArchiveReportStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckEArchiveReportStateCompleted(this, new CheckEArchiveReportStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteEArchiveInvoice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InvoiceInfoResult DeleteEArchiveInvoice(string Ticket, string InvoiceNumber, string InvoiceNumberType) {
            object[] results = this.Invoke("DeleteEArchiveInvoice", new object[] {
                        Ticket,
                        InvoiceNumber,
                        InvoiceNumberType});
            return ((InvoiceInfoResult)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteEArchiveInvoiceAsync(string Ticket, string InvoiceNumber, string InvoiceNumberType) {
            this.DeleteEArchiveInvoiceAsync(Ticket, InvoiceNumber, InvoiceNumberType, null);
        }
        
        /// <remarks/>
        public void DeleteEArchiveInvoiceAsync(string Ticket, string InvoiceNumber, string InvoiceNumberType, object userState) {
            if ((this.DeleteEArchiveInvoiceOperationCompleted == null)) {
                this.DeleteEArchiveInvoiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteEArchiveInvoiceOperationCompleted);
            }
            this.InvokeAsync("DeleteEArchiveInvoice", new object[] {
                        Ticket,
                        InvoiceNumber,
                        InvoiceNumberType}, this.DeleteEArchiveInvoiceOperationCompleted, userState);
        }
        
        private void OnDeleteEArchiveInvoiceOperationCompleted(object arg) {
            if ((this.DeleteEArchiveInvoiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteEArchiveInvoiceCompleted(this, new DeleteEArchiveInvoiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteEArchiveReport", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EArchiveReportResult DeleteEArchiveReport(string Ticket, string ReportNo) {
            object[] results = this.Invoke("DeleteEArchiveReport", new object[] {
                        Ticket,
                        ReportNo});
            return ((EArchiveReportResult)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteEArchiveReportAsync(string Ticket, string ReportNo) {
            this.DeleteEArchiveReportAsync(Ticket, ReportNo, null);
        }
        
        /// <remarks/>
        public void DeleteEArchiveReportAsync(string Ticket, string ReportNo, object userState) {
            if ((this.DeleteEArchiveReportOperationCompleted == null)) {
                this.DeleteEArchiveReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteEArchiveReportOperationCompleted);
            }
            this.InvokeAsync("DeleteEArchiveReport", new object[] {
                        Ticket,
                        ReportNo}, this.DeleteEArchiveReportOperationCompleted, userState);
        }
        
        private void OnDeleteEArchiveReportOperationCompleted(object arg) {
            if ((this.DeleteEArchiveReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteEArchiveReportCompleted(this, new DeleteEArchiveReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckInvoiceStateWithReconciliationID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InvoiceStateResult CheckInvoiceStateWithReconciliationID(string Ticket, string ReconciliationId) {
            object[] results = this.Invoke("CheckInvoiceStateWithReconciliationID", new object[] {
                        Ticket,
                        ReconciliationId});
            return ((InvoiceStateResult)(results[0]));
        }
        
        /// <remarks/>
        public void CheckInvoiceStateWithReconciliationIDAsync(string Ticket, string ReconciliationId) {
            this.CheckInvoiceStateWithReconciliationIDAsync(Ticket, ReconciliationId, null);
        }
        
        /// <remarks/>
        public void CheckInvoiceStateWithReconciliationIDAsync(string Ticket, string ReconciliationId, object userState) {
            if ((this.CheckInvoiceStateWithReconciliationIDOperationCompleted == null)) {
                this.CheckInvoiceStateWithReconciliationIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckInvoiceStateWithReconciliationIDOperationCompleted);
            }
            this.InvokeAsync("CheckInvoiceStateWithReconciliationID", new object[] {
                        Ticket,
                        ReconciliationId}, this.CheckInvoiceStateWithReconciliationIDOperationCompleted, userState);
        }
        
        private void OnCheckInvoiceStateWithReconciliationIDOperationCompleted(object arg) {
            if ((this.CheckInvoiceStateWithReconciliationIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckInvoiceStateWithReconciliationIDCompleted(this, new CheckInvoiceStateWithReconciliationIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckEnvelopeState", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EnvelopeStateResult CheckEnvelopeState(string Ticket, string InstanceIdentifier) {
            object[] results = this.Invoke("CheckEnvelopeState", new object[] {
                        Ticket,
                        InstanceIdentifier});
            return ((EnvelopeStateResult)(results[0]));
        }
        
        /// <remarks/>
        public void CheckEnvelopeStateAsync(string Ticket, string InstanceIdentifier) {
            this.CheckEnvelopeStateAsync(Ticket, InstanceIdentifier, null);
        }
        
        /// <remarks/>
        public void CheckEnvelopeStateAsync(string Ticket, string InstanceIdentifier, object userState) {
            if ((this.CheckEnvelopeStateOperationCompleted == null)) {
                this.CheckEnvelopeStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckEnvelopeStateOperationCompleted);
            }
            this.InvokeAsync("CheckEnvelopeState", new object[] {
                        Ticket,
                        InstanceIdentifier}, this.CheckEnvelopeStateOperationCompleted, userState);
        }
        
        private void OnCheckEnvelopeStateOperationCompleted(object arg) {
            if ((this.CheckEnvelopeStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckEnvelopeStateCompleted(this, new CheckEnvelopeStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetEnvelope", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EnvelopeDownloadResult GetEnvelope(string Ticket, string ReferenceId, EnvelopeDownloadDocumentType EnvelopeDownloadDocumentType) {
            object[] results = this.Invoke("GetEnvelope", new object[] {
                        Ticket,
                        ReferenceId,
                        EnvelopeDownloadDocumentType});
            return ((EnvelopeDownloadResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetEnvelopeAsync(string Ticket, string ReferenceId, EnvelopeDownloadDocumentType EnvelopeDownloadDocumentType) {
            this.GetEnvelopeAsync(Ticket, ReferenceId, EnvelopeDownloadDocumentType, null);
        }
        
        /// <remarks/>
        public void GetEnvelopeAsync(string Ticket, string ReferenceId, EnvelopeDownloadDocumentType EnvelopeDownloadDocumentType, object userState) {
            if ((this.GetEnvelopeOperationCompleted == null)) {
                this.GetEnvelopeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEnvelopeOperationCompleted);
            }
            this.InvokeAsync("GetEnvelope", new object[] {
                        Ticket,
                        ReferenceId,
                        EnvelopeDownloadDocumentType}, this.GetEnvelopeOperationCompleted, userState);
        }
        
        private void OnGetEnvelopeOperationCompleted(object arg) {
            if ((this.GetEnvelopeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEnvelopeCompleted(this, new GetEnvelopeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAvailableInvoices", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InvoicePackResult GetAvailableInvoices(string Ticket, string CorporateCode) {
            object[] results = this.Invoke("GetAvailableInvoices", new object[] {
                        Ticket,
                        CorporateCode});
            return ((InvoicePackResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvailableInvoicesAsync(string Ticket, string CorporateCode) {
            this.GetAvailableInvoicesAsync(Ticket, CorporateCode, null);
        }
        
        /// <remarks/>
        public void GetAvailableInvoicesAsync(string Ticket, string CorporateCode, object userState) {
            if ((this.GetAvailableInvoicesOperationCompleted == null)) {
                this.GetAvailableInvoicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvailableInvoicesOperationCompleted);
            }
            this.InvokeAsync("GetAvailableInvoices", new object[] {
                        Ticket,
                        CorporateCode}, this.GetAvailableInvoicesOperationCompleted, userState);
        }
        
        private void OnGetAvailableInvoicesOperationCompleted(object arg) {
            if ((this.GetAvailableInvoicesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvailableInvoicesCompleted(this, new GetAvailableInvoicesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAvailableInvoicesPW", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InvoicePackResult GetAvailableInvoicesPW(string Ticket, string ErpCode, string LoginName, Direction direction) {
            object[] results = this.Invoke("GetAvailableInvoicesPW", new object[] {
                        Ticket,
                        ErpCode,
                        LoginName,
                        direction});
            return ((InvoicePackResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvailableInvoicesPWAsync(string Ticket, string ErpCode, string LoginName, Direction direction) {
            this.GetAvailableInvoicesPWAsync(Ticket, ErpCode, LoginName, direction, null);
        }
        
        /// <remarks/>
        public void GetAvailableInvoicesPWAsync(string Ticket, string ErpCode, string LoginName, Direction direction, object userState) {
            if ((this.GetAvailableInvoicesPWOperationCompleted == null)) {
                this.GetAvailableInvoicesPWOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvailableInvoicesPWOperationCompleted);
            }
            this.InvokeAsync("GetAvailableInvoicesPW", new object[] {
                        Ticket,
                        ErpCode,
                        LoginName,
                        direction}, this.GetAvailableInvoicesPWOperationCompleted, userState);
        }
        
        private void OnGetAvailableInvoicesPWOperationCompleted(object arg) {
            if ((this.GetAvailableInvoicesPWCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvailableInvoicesPWCompleted(this, new GetAvailableInvoicesPWCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAvailableCompletedInvoices", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InvoicePackResult GetAvailableCompletedInvoices(string Ticket, string CorporateCode) {
            object[] results = this.Invoke("GetAvailableCompletedInvoices", new object[] {
                        Ticket,
                        CorporateCode});
            return ((InvoicePackResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvailableCompletedInvoicesAsync(string Ticket, string CorporateCode) {
            this.GetAvailableCompletedInvoicesAsync(Ticket, CorporateCode, null);
        }
        
        /// <remarks/>
        public void GetAvailableCompletedInvoicesAsync(string Ticket, string CorporateCode, object userState) {
            if ((this.GetAvailableCompletedInvoicesOperationCompleted == null)) {
                this.GetAvailableCompletedInvoicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvailableCompletedInvoicesOperationCompleted);
            }
            this.InvokeAsync("GetAvailableCompletedInvoices", new object[] {
                        Ticket,
                        CorporateCode}, this.GetAvailableCompletedInvoicesOperationCompleted, userState);
        }
        
        private void OnGetAvailableCompletedInvoicesOperationCompleted(object arg) {
            if ((this.GetAvailableCompletedInvoicesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvailableCompletedInvoicesCompleted(this, new GetAvailableCompletedInvoicesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAvailableInvoicesByDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InvoicePackResult GetAvailableInvoicesByDate(string Ticket, string CorporateCode, System.DateTime StartDate, System.DateTime EndDate) {
            object[] results = this.Invoke("GetAvailableInvoicesByDate", new object[] {
                        Ticket,
                        CorporateCode,
                        StartDate,
                        EndDate});
            return ((InvoicePackResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvailableInvoicesByDateAsync(string Ticket, string CorporateCode, System.DateTime StartDate, System.DateTime EndDate) {
            this.GetAvailableInvoicesByDateAsync(Ticket, CorporateCode, StartDate, EndDate, null);
        }
        
        /// <remarks/>
        public void GetAvailableInvoicesByDateAsync(string Ticket, string CorporateCode, System.DateTime StartDate, System.DateTime EndDate, object userState) {
            if ((this.GetAvailableInvoicesByDateOperationCompleted == null)) {
                this.GetAvailableInvoicesByDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvailableInvoicesByDateOperationCompleted);
            }
            this.InvokeAsync("GetAvailableInvoicesByDate", new object[] {
                        Ticket,
                        CorporateCode,
                        StartDate,
                        EndDate}, this.GetAvailableInvoicesByDateOperationCompleted, userState);
        }
        
        private void OnGetAvailableInvoicesByDateOperationCompleted(object arg) {
            if ((this.GetAvailableInvoicesByDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvailableInvoicesByDateCompleted(this, new GetAvailableInvoicesByDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAvailableInvoicesWithDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InvoicePackResult GetAvailableInvoicesWithDate(string Ticket, string CorporateCode, System.DateTime StartDate, System.DateTime EndDate) {
            object[] results = this.Invoke("GetAvailableInvoicesWithDate", new object[] {
                        Ticket,
                        CorporateCode,
                        StartDate,
                        EndDate});
            return ((InvoicePackResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvailableInvoicesWithDateAsync(string Ticket, string CorporateCode, System.DateTime StartDate, System.DateTime EndDate) {
            this.GetAvailableInvoicesWithDateAsync(Ticket, CorporateCode, StartDate, EndDate, null);
        }
        
        /// <remarks/>
        public void GetAvailableInvoicesWithDateAsync(string Ticket, string CorporateCode, System.DateTime StartDate, System.DateTime EndDate, object userState) {
            if ((this.GetAvailableInvoicesWithDateOperationCompleted == null)) {
                this.GetAvailableInvoicesWithDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvailableInvoicesWithDateOperationCompleted);
            }
            this.InvokeAsync("GetAvailableInvoicesWithDate", new object[] {
                        Ticket,
                        CorporateCode,
                        StartDate,
                        EndDate}, this.GetAvailableInvoicesWithDateOperationCompleted, userState);
        }
        
        private void OnGetAvailableInvoicesWithDateOperationCompleted(object arg) {
            if ((this.GetAvailableInvoicesWithDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvailableInvoicesWithDateCompleted(this, new GetAvailableInvoicesWithDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetIncomingInvoicesByIssueDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InvoicePackResult GetIncomingInvoicesByIssueDate(string Ticket, string CorporateCode, System.DateTime StartDate, System.DateTime EndDate) {
            object[] results = this.Invoke("GetIncomingInvoicesByIssueDate", new object[] {
                        Ticket,
                        CorporateCode,
                        StartDate,
                        EndDate});
            return ((InvoicePackResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetIncomingInvoicesByIssueDateAsync(string Ticket, string CorporateCode, System.DateTime StartDate, System.DateTime EndDate) {
            this.GetIncomingInvoicesByIssueDateAsync(Ticket, CorporateCode, StartDate, EndDate, null);
        }
        
        /// <remarks/>
        public void GetIncomingInvoicesByIssueDateAsync(string Ticket, string CorporateCode, System.DateTime StartDate, System.DateTime EndDate, object userState) {
            if ((this.GetIncomingInvoicesByIssueDateOperationCompleted == null)) {
                this.GetIncomingInvoicesByIssueDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIncomingInvoicesByIssueDateOperationCompleted);
            }
            this.InvokeAsync("GetIncomingInvoicesByIssueDate", new object[] {
                        Ticket,
                        CorporateCode,
                        StartDate,
                        EndDate}, this.GetIncomingInvoicesByIssueDateOperationCompleted, userState);
        }
        
        private void OnGetIncomingInvoicesByIssueDateOperationCompleted(object arg) {
            if ((this.GetIncomingInvoicesByIssueDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIncomingInvoicesByIssueDateCompleted(this, new GetIncomingInvoicesByIssueDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetEArchiveReportList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EArchiveReportPackResult GetEArchiveReportList(string Ticket, string CorporateCode) {
            object[] results = this.Invoke("GetEArchiveReportList", new object[] {
                        Ticket,
                        CorporateCode});
            return ((EArchiveReportPackResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetEArchiveReportListAsync(string Ticket, string CorporateCode) {
            this.GetEArchiveReportListAsync(Ticket, CorporateCode, null);
        }
        
        /// <remarks/>
        public void GetEArchiveReportListAsync(string Ticket, string CorporateCode, object userState) {
            if ((this.GetEArchiveReportListOperationCompleted == null)) {
                this.GetEArchiveReportListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEArchiveReportListOperationCompleted);
            }
            this.InvokeAsync("GetEArchiveReportList", new object[] {
                        Ticket,
                        CorporateCode}, this.GetEArchiveReportListOperationCompleted, userState);
        }
        
        private void OnGetEArchiveReportListOperationCompleted(object arg) {
            if ((this.GetEArchiveReportListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEArchiveReportListCompleted(this, new GetEArchiveReportListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetEArchiveReportListWithPeriod", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EArchiveReportPackResult GetEArchiveReportListWithPeriod(string Ticket, string CorporateCode, int Year, int Month, EArchiveReportStatusListType listType) {
            object[] results = this.Invoke("GetEArchiveReportListWithPeriod", new object[] {
                        Ticket,
                        CorporateCode,
                        Year,
                        Month,
                        listType});
            return ((EArchiveReportPackResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetEArchiveReportListWithPeriodAsync(string Ticket, string CorporateCode, int Year, int Month, EArchiveReportStatusListType listType) {
            this.GetEArchiveReportListWithPeriodAsync(Ticket, CorporateCode, Year, Month, listType, null);
        }
        
        /// <remarks/>
        public void GetEArchiveReportListWithPeriodAsync(string Ticket, string CorporateCode, int Year, int Month, EArchiveReportStatusListType listType, object userState) {
            if ((this.GetEArchiveReportListWithPeriodOperationCompleted == null)) {
                this.GetEArchiveReportListWithPeriodOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEArchiveReportListWithPeriodOperationCompleted);
            }
            this.InvokeAsync("GetEArchiveReportListWithPeriod", new object[] {
                        Ticket,
                        CorporateCode,
                        Year,
                        Month,
                        listType}, this.GetEArchiveReportListWithPeriodOperationCompleted, userState);
        }
        
        private void OnGetEArchiveReportListWithPeriodOperationCompleted(object arg) {
            if ((this.GetEArchiveReportListWithPeriodCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEArchiveReportListWithPeriodCompleted(this, new GetEArchiveReportListWithPeriodCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetInvoice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InvoiceInfoResult GetInvoice(string Ticket, string UUID) {
            object[] results = this.Invoke("GetInvoice", new object[] {
                        Ticket,
                        UUID});
            return ((InvoiceInfoResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetInvoiceAsync(string Ticket, string UUID) {
            this.GetInvoiceAsync(Ticket, UUID, null);
        }
        
        /// <remarks/>
        public void GetInvoiceAsync(string Ticket, string UUID, object userState) {
            if ((this.GetInvoiceOperationCompleted == null)) {
                this.GetInvoiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInvoiceOperationCompleted);
            }
            this.InvokeAsync("GetInvoice", new object[] {
                        Ticket,
                        UUID}, this.GetInvoiceOperationCompleted, userState);
        }
        
        private void OnGetInvoiceOperationCompleted(object arg) {
            if ((this.GetInvoiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInvoiceCompleted(this, new GetInvoiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetInvoicePW", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InvoiceInfoResult GetInvoicePW(string Ticket, string UUID, Direction direction) {
            object[] results = this.Invoke("GetInvoicePW", new object[] {
                        Ticket,
                        UUID,
                        direction});
            return ((InvoiceInfoResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetInvoicePWAsync(string Ticket, string UUID, Direction direction) {
            this.GetInvoicePWAsync(Ticket, UUID, direction, null);
        }
        
        /// <remarks/>
        public void GetInvoicePWAsync(string Ticket, string UUID, Direction direction, object userState) {
            if ((this.GetInvoicePWOperationCompleted == null)) {
                this.GetInvoicePWOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInvoicePWOperationCompleted);
            }
            this.InvokeAsync("GetInvoicePW", new object[] {
                        Ticket,
                        UUID,
                        direction}, this.GetInvoicePWOperationCompleted, userState);
        }
        
        private void OnGetInvoicePWOperationCompleted(object arg) {
            if ((this.GetInvoicePWCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInvoicePWCompleted(this, new GetInvoicePWCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetInvoiceAllDirection", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InvoiceInfoResult GetInvoiceAllDirection(string Ticket, string UUID) {
            object[] results = this.Invoke("GetInvoiceAllDirection", new object[] {
                        Ticket,
                        UUID});
            return ((InvoiceInfoResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetInvoiceAllDirectionAsync(string Ticket, string UUID) {
            this.GetInvoiceAllDirectionAsync(Ticket, UUID, null);
        }
        
        /// <remarks/>
        public void GetInvoiceAllDirectionAsync(string Ticket, string UUID, object userState) {
            if ((this.GetInvoiceAllDirectionOperationCompleted == null)) {
                this.GetInvoiceAllDirectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInvoiceAllDirectionOperationCompleted);
            }
            this.InvokeAsync("GetInvoiceAllDirection", new object[] {
                        Ticket,
                        UUID}, this.GetInvoiceAllDirectionOperationCompleted, userState);
        }
        
        private void OnGetInvoiceAllDirectionOperationCompleted(object arg) {
            if ((this.GetInvoiceAllDirectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInvoiceAllDirectionCompleted(this, new GetInvoiceAllDirectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetInvoicePDF", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InvoiceInfoResult GetInvoicePDF(string Ticket, string UUID) {
            object[] results = this.Invoke("GetInvoicePDF", new object[] {
                        Ticket,
                        UUID});
            return ((InvoiceInfoResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetInvoicePDFAsync(string Ticket, string UUID) {
            this.GetInvoicePDFAsync(Ticket, UUID, null);
        }
        
        /// <remarks/>
        public void GetInvoicePDFAsync(string Ticket, string UUID, object userState) {
            if ((this.GetInvoicePDFOperationCompleted == null)) {
                this.GetInvoicePDFOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInvoicePDFOperationCompleted);
            }
            this.InvokeAsync("GetInvoicePDF", new object[] {
                        Ticket,
                        UUID}, this.GetInvoicePDFOperationCompleted, userState);
        }
        
        private void OnGetInvoicePDFOperationCompleted(object arg) {
            if ((this.GetInvoicePDFCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInvoicePDFCompleted(this, new GetInvoicePDFCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetInvoicePDFByInvoiceId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InvoiceInfoResult GetInvoicePDFByInvoiceId(string ticket, string InvoiceId, Direction Direction) {
            object[] results = this.Invoke("GetInvoicePDFByInvoiceId", new object[] {
                        ticket,
                        InvoiceId,
                        Direction});
            return ((InvoiceInfoResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetInvoicePDFByInvoiceIdAsync(string ticket, string InvoiceId, Direction Direction) {
            this.GetInvoicePDFByInvoiceIdAsync(ticket, InvoiceId, Direction, null);
        }
        
        /// <remarks/>
        public void GetInvoicePDFByInvoiceIdAsync(string ticket, string InvoiceId, Direction Direction, object userState) {
            if ((this.GetInvoicePDFByInvoiceIdOperationCompleted == null)) {
                this.GetInvoicePDFByInvoiceIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInvoicePDFByInvoiceIdOperationCompleted);
            }
            this.InvokeAsync("GetInvoicePDFByInvoiceId", new object[] {
                        ticket,
                        InvoiceId,
                        Direction}, this.GetInvoicePDFByInvoiceIdOperationCompleted, userState);
        }
        
        private void OnGetInvoicePDFByInvoiceIdOperationCompleted(object arg) {
            if ((this.GetInvoicePDFByInvoiceIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInvoicePDFByInvoiceIdCompleted(this, new GetInvoicePDFByInvoiceIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetInvoicePDFByInvoiceIdWithoutDirection", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InvoiceInfoResult GetInvoicePDFByInvoiceIdWithoutDirection(string ticket, string InvoiceId) {
            object[] results = this.Invoke("GetInvoicePDFByInvoiceIdWithoutDirection", new object[] {
                        ticket,
                        InvoiceId});
            return ((InvoiceInfoResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetInvoicePDFByInvoiceIdWithoutDirectionAsync(string ticket, string InvoiceId) {
            this.GetInvoicePDFByInvoiceIdWithoutDirectionAsync(ticket, InvoiceId, null);
        }
        
        /// <remarks/>
        public void GetInvoicePDFByInvoiceIdWithoutDirectionAsync(string ticket, string InvoiceId, object userState) {
            if ((this.GetInvoicePDFByInvoiceIdWithoutDirectionOperationCompleted == null)) {
                this.GetInvoicePDFByInvoiceIdWithoutDirectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInvoicePDFByInvoiceIdWithoutDirectionOperationCompleted);
            }
            this.InvokeAsync("GetInvoicePDFByInvoiceIdWithoutDirection", new object[] {
                        ticket,
                        InvoiceId}, this.GetInvoicePDFByInvoiceIdWithoutDirectionOperationCompleted, userState);
        }
        
        private void OnGetInvoicePDFByInvoiceIdWithoutDirectionOperationCompleted(object arg) {
            if ((this.GetInvoicePDFByInvoiceIdWithoutDirectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInvoicePDFByInvoiceIdWithoutDirectionCompleted(this, new GetInvoicePDFByInvoiceIdWithoutDirectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetInvoiceImage", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InvoiceInfoResult GetInvoiceImage(string Ticket, string UUID, string ImageFormat) {
            object[] results = this.Invoke("GetInvoiceImage", new object[] {
                        Ticket,
                        UUID,
                        ImageFormat});
            return ((InvoiceInfoResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetInvoiceImageAsync(string Ticket, string UUID, string ImageFormat) {
            this.GetInvoiceImageAsync(Ticket, UUID, ImageFormat, null);
        }
        
        /// <remarks/>
        public void GetInvoiceImageAsync(string Ticket, string UUID, string ImageFormat, object userState) {
            if ((this.GetInvoiceImageOperationCompleted == null)) {
                this.GetInvoiceImageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInvoiceImageOperationCompleted);
            }
            this.InvokeAsync("GetInvoiceImage", new object[] {
                        Ticket,
                        UUID,
                        ImageFormat}, this.GetInvoiceImageOperationCompleted, userState);
        }
        
        private void OnGetInvoiceImageOperationCompleted(object arg) {
            if ((this.GetInvoiceImageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInvoiceImageCompleted(this, new GetInvoiceImageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetInvoiceTemplate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CorporateTemplateResult GetInvoiceTemplate(string Ticket, string TemplateCode, int InvoiceType) {
            object[] results = this.Invoke("GetInvoiceTemplate", new object[] {
                        Ticket,
                        TemplateCode,
                        InvoiceType});
            return ((CorporateTemplateResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetInvoiceTemplateAsync(string Ticket, string TemplateCode, int InvoiceType) {
            this.GetInvoiceTemplateAsync(Ticket, TemplateCode, InvoiceType, null);
        }
        
        /// <remarks/>
        public void GetInvoiceTemplateAsync(string Ticket, string TemplateCode, int InvoiceType, object userState) {
            if ((this.GetInvoiceTemplateOperationCompleted == null)) {
                this.GetInvoiceTemplateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInvoiceTemplateOperationCompleted);
            }
            this.InvokeAsync("GetInvoiceTemplate", new object[] {
                        Ticket,
                        TemplateCode,
                        InvoiceType}, this.GetInvoiceTemplateOperationCompleted, userState);
        }
        
        private void OnGetInvoiceTemplateOperationCompleted(object arg) {
            if ((this.GetInvoiceTemplateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInvoiceTemplateCompleted(this, new GetInvoiceTemplateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetEArchiveInvoice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InvoiceInfoResult GetEArchiveInvoice(string Ticket, string Value, string ValueType, string FileType) {
            object[] results = this.Invoke("GetEArchiveInvoice", new object[] {
                        Ticket,
                        Value,
                        ValueType,
                        FileType});
            return ((InvoiceInfoResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetEArchiveInvoiceAsync(string Ticket, string Value, string ValueType, string FileType) {
            this.GetEArchiveInvoiceAsync(Ticket, Value, ValueType, FileType, null);
        }
        
        /// <remarks/>
        public void GetEArchiveInvoiceAsync(string Ticket, string Value, string ValueType, string FileType, object userState) {
            if ((this.GetEArchiveInvoiceOperationCompleted == null)) {
                this.GetEArchiveInvoiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEArchiveInvoiceOperationCompleted);
            }
            this.InvokeAsync("GetEArchiveInvoice", new object[] {
                        Ticket,
                        Value,
                        ValueType,
                        FileType}, this.GetEArchiveInvoiceOperationCompleted, userState);
        }
        
        private void OnGetEArchiveInvoiceOperationCompleted(object arg) {
            if ((this.GetEArchiveInvoiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEArchiveInvoiceCompleted(this, new GetEArchiveInvoiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetEArchiveIncomingInvoice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InvoicePackResult GetEArchiveIncomingInvoice(string Ticket, string Value, string ValueType, string FileType) {
            object[] results = this.Invoke("GetEArchiveIncomingInvoice", new object[] {
                        Ticket,
                        Value,
                        ValueType,
                        FileType});
            return ((InvoicePackResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetEArchiveIncomingInvoiceAsync(string Ticket, string Value, string ValueType, string FileType) {
            this.GetEArchiveIncomingInvoiceAsync(Ticket, Value, ValueType, FileType, null);
        }
        
        /// <remarks/>
        public void GetEArchiveIncomingInvoiceAsync(string Ticket, string Value, string ValueType, string FileType, object userState) {
            if ((this.GetEArchiveIncomingInvoiceOperationCompleted == null)) {
                this.GetEArchiveIncomingInvoiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEArchiveIncomingInvoiceOperationCompleted);
            }
            this.InvokeAsync("GetEArchiveIncomingInvoice", new object[] {
                        Ticket,
                        Value,
                        ValueType,
                        FileType}, this.GetEArchiveIncomingInvoiceOperationCompleted, userState);
        }
        
        private void OnGetEArchiveIncomingInvoiceOperationCompleted(object arg) {
            if ((this.GetEArchiveIncomingInvoiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEArchiveIncomingInvoiceCompleted(this, new GetEArchiveIncomingInvoiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetEArchiveReport", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EArchiveReportResult GetEArchiveReport(string Ticket, string ReportNo, string FileType) {
            object[] results = this.Invoke("GetEArchiveReport", new object[] {
                        Ticket,
                        ReportNo,
                        FileType});
            return ((EArchiveReportResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetEArchiveReportAsync(string Ticket, string ReportNo, string FileType) {
            this.GetEArchiveReportAsync(Ticket, ReportNo, FileType, null);
        }
        
        /// <remarks/>
        public void GetEArchiveReportAsync(string Ticket, string ReportNo, string FileType, object userState) {
            if ((this.GetEArchiveReportOperationCompleted == null)) {
                this.GetEArchiveReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEArchiveReportOperationCompleted);
            }
            this.InvokeAsync("GetEArchiveReport", new object[] {
                        Ticket,
                        ReportNo,
                        FileType}, this.GetEArchiveReportOperationCompleted, userState);
        }
        
        private void OnGetEArchiveReportOperationCompleted(object arg) {
            if ((this.GetEArchiveReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEArchiveReportCompleted(this, new GetEArchiveReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetInvoiceXML", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InvoiceInfoResult GetInvoiceXML(string Ticket, string UUID) {
            object[] results = this.Invoke("GetInvoiceXML", new object[] {
                        Ticket,
                        UUID});
            return ((InvoiceInfoResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetInvoiceXMLAsync(string Ticket, string UUID) {
            this.GetInvoiceXMLAsync(Ticket, UUID, null);
        }
        
        /// <remarks/>
        public void GetInvoiceXMLAsync(string Ticket, string UUID, object userState) {
            if ((this.GetInvoiceXMLOperationCompleted == null)) {
                this.GetInvoiceXMLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInvoiceXMLOperationCompleted);
            }
            this.InvokeAsync("GetInvoiceXML", new object[] {
                        Ticket,
                        UUID}, this.GetInvoiceXMLOperationCompleted, userState);
        }
        
        private void OnGetInvoiceXMLOperationCompleted(object arg) {
            if ((this.GetInvoiceXMLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInvoiceXMLCompleted(this, new GetInvoiceXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetInvoiceXMLWithOutFlag", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InvoiceInfoResult GetInvoiceXMLWithOutFlag(string Ticket, string UUID) {
            object[] results = this.Invoke("GetInvoiceXMLWithOutFlag", new object[] {
                        Ticket,
                        UUID});
            return ((InvoiceInfoResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetInvoiceXMLWithOutFlagAsync(string Ticket, string UUID) {
            this.GetInvoiceXMLWithOutFlagAsync(Ticket, UUID, null);
        }
        
        /// <remarks/>
        public void GetInvoiceXMLWithOutFlagAsync(string Ticket, string UUID, object userState) {
            if ((this.GetInvoiceXMLWithOutFlagOperationCompleted == null)) {
                this.GetInvoiceXMLWithOutFlagOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInvoiceXMLWithOutFlagOperationCompleted);
            }
            this.InvokeAsync("GetInvoiceXMLWithOutFlag", new object[] {
                        Ticket,
                        UUID}, this.GetInvoiceXMLWithOutFlagOperationCompleted, userState);
        }
        
        private void OnGetInvoiceXMLWithOutFlagOperationCompleted(object arg) {
            if ((this.GetInvoiceXMLWithOutFlagCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInvoiceXMLWithOutFlagCompleted(this, new GetInvoiceXMLWithOutFlagCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetInvoiceWithOutFlag", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InvoiceInfoResult GetInvoiceWithOutFlag(string Ticket, string UUID) {
            object[] results = this.Invoke("GetInvoiceWithOutFlag", new object[] {
                        Ticket,
                        UUID});
            return ((InvoiceInfoResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetInvoiceWithOutFlagAsync(string Ticket, string UUID) {
            this.GetInvoiceWithOutFlagAsync(Ticket, UUID, null);
        }
        
        /// <remarks/>
        public void GetInvoiceWithOutFlagAsync(string Ticket, string UUID, object userState) {
            if ((this.GetInvoiceWithOutFlagOperationCompleted == null)) {
                this.GetInvoiceWithOutFlagOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInvoiceWithOutFlagOperationCompleted);
            }
            this.InvokeAsync("GetInvoiceWithOutFlag", new object[] {
                        Ticket,
                        UUID}, this.GetInvoiceWithOutFlagOperationCompleted, userState);
        }
        
        private void OnGetInvoiceWithOutFlagOperationCompleted(object arg) {
            if ((this.GetInvoiceWithOutFlagCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInvoiceWithOutFlagCompleted(this, new GetInvoiceWithOutFlagCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckTaxIdListFromExcelFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EInvoiceCustomerListResult CheckTaxIdListFromExcelFile(string Ticket, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] FileData, string FileName) {
            object[] results = this.Invoke("CheckTaxIdListFromExcelFile", new object[] {
                        Ticket,
                        FileData,
                        FileName});
            return ((EInvoiceCustomerListResult)(results[0]));
        }
        
        /// <remarks/>
        public void CheckTaxIdListFromExcelFileAsync(string Ticket, byte[] FileData, string FileName) {
            this.CheckTaxIdListFromExcelFileAsync(Ticket, FileData, FileName, null);
        }
        
        /// <remarks/>
        public void CheckTaxIdListFromExcelFileAsync(string Ticket, byte[] FileData, string FileName, object userState) {
            if ((this.CheckTaxIdListFromExcelFileOperationCompleted == null)) {
                this.CheckTaxIdListFromExcelFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckTaxIdListFromExcelFileOperationCompleted);
            }
            this.InvokeAsync("CheckTaxIdListFromExcelFile", new object[] {
                        Ticket,
                        FileData,
                        FileName}, this.CheckTaxIdListFromExcelFileOperationCompleted, userState);
        }
        
        private void OnCheckTaxIdListFromExcelFileOperationCompleted(object arg) {
            if ((this.CheckTaxIdListFromExcelFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckTaxIdListFromExcelFileCompleted(this, new CheckTaxIdListFromExcelFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckCustomerTaxId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EInvoiceCustomerListResult CheckCustomerTaxId(string Ticket, string TaxIdOrPersonalId) {
            object[] results = this.Invoke("CheckCustomerTaxId", new object[] {
                        Ticket,
                        TaxIdOrPersonalId});
            return ((EInvoiceCustomerListResult)(results[0]));
        }
        
        /// <remarks/>
        public void CheckCustomerTaxIdAsync(string Ticket, string TaxIdOrPersonalId) {
            this.CheckCustomerTaxIdAsync(Ticket, TaxIdOrPersonalId, null);
        }
        
        /// <remarks/>
        public void CheckCustomerTaxIdAsync(string Ticket, string TaxIdOrPersonalId, object userState) {
            if ((this.CheckCustomerTaxIdOperationCompleted == null)) {
                this.CheckCustomerTaxIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckCustomerTaxIdOperationCompleted);
            }
            this.InvokeAsync("CheckCustomerTaxId", new object[] {
                        Ticket,
                        TaxIdOrPersonalId}, this.CheckCustomerTaxIdOperationCompleted, userState);
        }
        
        private void OnCheckCustomerTaxIdOperationCompleted(object arg) {
            if ((this.CheckCustomerTaxIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckCustomerTaxIdCompleted(this, new CheckCustomerTaxIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckCustomerTaxIdbyDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EInvoiceCustomerListResult CheckCustomerTaxIdbyDate(string Ticket, string TaxIdOrPersonalId, System.DateTime issueDate) {
            object[] results = this.Invoke("CheckCustomerTaxIdbyDate", new object[] {
                        Ticket,
                        TaxIdOrPersonalId,
                        issueDate});
            return ((EInvoiceCustomerListResult)(results[0]));
        }
        
        /// <remarks/>
        public void CheckCustomerTaxIdbyDateAsync(string Ticket, string TaxIdOrPersonalId, System.DateTime issueDate) {
            this.CheckCustomerTaxIdbyDateAsync(Ticket, TaxIdOrPersonalId, issueDate, null);
        }
        
        /// <remarks/>
        public void CheckCustomerTaxIdbyDateAsync(string Ticket, string TaxIdOrPersonalId, System.DateTime issueDate, object userState) {
            if ((this.CheckCustomerTaxIdbyDateOperationCompleted == null)) {
                this.CheckCustomerTaxIdbyDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckCustomerTaxIdbyDateOperationCompleted);
            }
            this.InvokeAsync("CheckCustomerTaxIdbyDate", new object[] {
                        Ticket,
                        TaxIdOrPersonalId,
                        issueDate}, this.CheckCustomerTaxIdbyDateOperationCompleted, userState);
        }
        
        private void OnCheckCustomerTaxIdbyDateOperationCompleted(object arg) {
            if ((this.CheckCustomerTaxIdbyDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckCustomerTaxIdbyDateCompleted(this, new CheckCustomerTaxIdbyDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTaxIdListbyDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EInvoiceCustomerListResult GetTaxIdListbyDate(string Ticket, System.DateTime StartDate) {
            object[] results = this.Invoke("GetTaxIdListbyDate", new object[] {
                        Ticket,
                        StartDate});
            return ((EInvoiceCustomerListResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetTaxIdListbyDateAsync(string Ticket, System.DateTime StartDate) {
            this.GetTaxIdListbyDateAsync(Ticket, StartDate, null);
        }
        
        /// <remarks/>
        public void GetTaxIdListbyDateAsync(string Ticket, System.DateTime StartDate, object userState) {
            if ((this.GetTaxIdListbyDateOperationCompleted == null)) {
                this.GetTaxIdListbyDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTaxIdListbyDateOperationCompleted);
            }
            this.InvokeAsync("GetTaxIdListbyDate", new object[] {
                        Ticket,
                        StartDate}, this.GetTaxIdListbyDateOperationCompleted, userState);
        }
        
        private void OnGetTaxIdListbyDateOperationCompleted(object arg) {
            if ((this.GetTaxIdListbyDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTaxIdListbyDateCompleted(this, new GetTaxIdListbyDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetEInvoiceCustomerListByDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EInvoiceCustomerListResult GetEInvoiceCustomerListByDate(string Ticket, string StartDate) {
            object[] results = this.Invoke("GetEInvoiceCustomerListByDate", new object[] {
                        Ticket,
                        StartDate});
            return ((EInvoiceCustomerListResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetEInvoiceCustomerListByDateAsync(string Ticket, string StartDate) {
            this.GetEInvoiceCustomerListByDateAsync(Ticket, StartDate, null);
        }
        
        /// <remarks/>
        public void GetEInvoiceCustomerListByDateAsync(string Ticket, string StartDate, object userState) {
            if ((this.GetEInvoiceCustomerListByDateOperationCompleted == null)) {
                this.GetEInvoiceCustomerListByDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEInvoiceCustomerListByDateOperationCompleted);
            }
            this.InvokeAsync("GetEInvoiceCustomerListByDate", new object[] {
                        Ticket,
                        StartDate}, this.GetEInvoiceCustomerListByDateOperationCompleted, userState);
        }
        
        private void OnGetEInvoiceCustomerListByDateOperationCompleted(object arg) {
            if ((this.GetEInvoiceCustomerListByDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEInvoiceCustomerListByDateCompleted(this, new GetEInvoiceCustomerListByDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetEInvoiceCustomerFullList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EInvoiceCustomerFullListResult GetEInvoiceCustomerFullList(string Ticket) {
            object[] results = this.Invoke("GetEInvoiceCustomerFullList", new object[] {
                        Ticket});
            return ((EInvoiceCustomerFullListResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetEInvoiceCustomerFullListAsync(string Ticket) {
            this.GetEInvoiceCustomerFullListAsync(Ticket, null);
        }
        
        /// <remarks/>
        public void GetEInvoiceCustomerFullListAsync(string Ticket, object userState) {
            if ((this.GetEInvoiceCustomerFullListOperationCompleted == null)) {
                this.GetEInvoiceCustomerFullListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEInvoiceCustomerFullListOperationCompleted);
            }
            this.InvokeAsync("GetEInvoiceCustomerFullList", new object[] {
                        Ticket}, this.GetEInvoiceCustomerFullListOperationCompleted, userState);
        }
        
        private void OnGetEInvoiceCustomerFullListOperationCompleted(object arg) {
            if ((this.GetEInvoiceCustomerFullListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEInvoiceCustomerFullListCompleted(this, new GetEInvoiceCustomerFullListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFormsAuthenticationTicket", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFormsAuthenticationTicket(string CorporateCode, string LoginName, string Password) {
            object[] results = this.Invoke("GetFormsAuthenticationTicket", new object[] {
                        CorporateCode,
                        LoginName,
                        Password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFormsAuthenticationTicketAsync(string CorporateCode, string LoginName, string Password) {
            this.GetFormsAuthenticationTicketAsync(CorporateCode, LoginName, Password, null);
        }
        
        /// <remarks/>
        public void GetFormsAuthenticationTicketAsync(string CorporateCode, string LoginName, string Password, object userState) {
            if ((this.GetFormsAuthenticationTicketOperationCompleted == null)) {
                this.GetFormsAuthenticationTicketOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFormsAuthenticationTicketOperationCompleted);
            }
            this.InvokeAsync("GetFormsAuthenticationTicket", new object[] {
                        CorporateCode,
                        LoginName,
                        Password}, this.GetFormsAuthenticationTicketOperationCompleted, userState);
        }
        
        private void OnGetFormsAuthenticationTicketOperationCompleted(object arg) {
            if ((this.GetFormsAuthenticationTicketCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFormsAuthenticationTicketCompleted(this, new GetFormsAuthenticationTicketCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFormsAuthenticationTicketPW", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFormsAuthenticationTicketPW(string ErpCode, string LoginName, string Password) {
            object[] results = this.Invoke("GetFormsAuthenticationTicketPW", new object[] {
                        ErpCode,
                        LoginName,
                        Password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFormsAuthenticationTicketPWAsync(string ErpCode, string LoginName, string Password) {
            this.GetFormsAuthenticationTicketPWAsync(ErpCode, LoginName, Password, null);
        }
        
        /// <remarks/>
        public void GetFormsAuthenticationTicketPWAsync(string ErpCode, string LoginName, string Password, object userState) {
            if ((this.GetFormsAuthenticationTicketPWOperationCompleted == null)) {
                this.GetFormsAuthenticationTicketPWOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFormsAuthenticationTicketPWOperationCompleted);
            }
            this.InvokeAsync("GetFormsAuthenticationTicketPW", new object[] {
                        ErpCode,
                        LoginName,
                        Password}, this.GetFormsAuthenticationTicketPWOperationCompleted, userState);
        }
        
        private void OnGetFormsAuthenticationTicketPWOperationCompleted(object arg) {
            if ((this.GetFormsAuthenticationTicketPWCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFormsAuthenticationTicketPWCompleted(this, new GetFormsAuthenticationTicketPWCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CancelInvoice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InvoiceInfoResult CancelInvoice(string Ticket, string UUID) {
            object[] results = this.Invoke("CancelInvoice", new object[] {
                        Ticket,
                        UUID});
            return ((InvoiceInfoResult)(results[0]));
        }
        
        /// <remarks/>
        public void CancelInvoiceAsync(string Ticket, string UUID) {
            this.CancelInvoiceAsync(Ticket, UUID, null);
        }
        
        /// <remarks/>
        public void CancelInvoiceAsync(string Ticket, string UUID, object userState) {
            if ((this.CancelInvoiceOperationCompleted == null)) {
                this.CancelInvoiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelInvoiceOperationCompleted);
            }
            this.InvokeAsync("CancelInvoice", new object[] {
                        Ticket,
                        UUID}, this.CancelInvoiceOperationCompleted, userState);
        }
        
        private void OnCancelInvoiceOperationCompleted(object arg) {
            if ((this.CancelInvoiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelInvoiceCompleted(this, new CancelInvoiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ReSendInvoice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InvoiceStateResult ReSendInvoice(string Ticket, string UUID) {
            object[] results = this.Invoke("ReSendInvoice", new object[] {
                        Ticket,
                        UUID});
            return ((InvoiceStateResult)(results[0]));
        }
        
        /// <remarks/>
        public void ReSendInvoiceAsync(string Ticket, string UUID) {
            this.ReSendInvoiceAsync(Ticket, UUID, null);
        }
        
        /// <remarks/>
        public void ReSendInvoiceAsync(string Ticket, string UUID, object userState) {
            if ((this.ReSendInvoiceOperationCompleted == null)) {
                this.ReSendInvoiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReSendInvoiceOperationCompleted);
            }
            this.InvokeAsync("ReSendInvoice", new object[] {
                        Ticket,
                        UUID}, this.ReSendInvoiceOperationCompleted, userState);
        }
        
        private void OnReSendInvoiceOperationCompleted(object arg) {
            if ((this.ReSendInvoiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReSendInvoiceCompleted(this, new ReSendInvoiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetInvoiceSummary", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InvoiceSummaryResult GetInvoiceSummary(string Ticket) {
            object[] results = this.Invoke("GetInvoiceSummary", new object[] {
                        Ticket});
            return ((InvoiceSummaryResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetInvoiceSummaryAsync(string Ticket) {
            this.GetInvoiceSummaryAsync(Ticket, null);
        }
        
        /// <remarks/>
        public void GetInvoiceSummaryAsync(string Ticket, object userState) {
            if ((this.GetInvoiceSummaryOperationCompleted == null)) {
                this.GetInvoiceSummaryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInvoiceSummaryOperationCompleted);
            }
            this.InvokeAsync("GetInvoiceSummary", new object[] {
                        Ticket}, this.GetInvoiceSummaryOperationCompleted, userState);
        }
        
        private void OnGetInvoiceSummaryOperationCompleted(object arg) {
            if ((this.GetInvoiceSummaryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInvoiceSummaryCompleted(this, new GetInvoiceSummaryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetInvoiceSummaryWithDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InvoiceSummaryResult GetInvoiceSummaryWithDate(string Ticket, System.DateTime startDate, System.DateTime endDate) {
            object[] results = this.Invoke("GetInvoiceSummaryWithDate", new object[] {
                        Ticket,
                        startDate,
                        endDate});
            return ((InvoiceSummaryResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetInvoiceSummaryWithDateAsync(string Ticket, System.DateTime startDate, System.DateTime endDate) {
            this.GetInvoiceSummaryWithDateAsync(Ticket, startDate, endDate, null);
        }
        
        /// <remarks/>
        public void GetInvoiceSummaryWithDateAsync(string Ticket, System.DateTime startDate, System.DateTime endDate, object userState) {
            if ((this.GetInvoiceSummaryWithDateOperationCompleted == null)) {
                this.GetInvoiceSummaryWithDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInvoiceSummaryWithDateOperationCompleted);
            }
            this.InvokeAsync("GetInvoiceSummaryWithDate", new object[] {
                        Ticket,
                        startDate,
                        endDate}, this.GetInvoiceSummaryWithDateOperationCompleted, userState);
        }
        
        private void OnGetInvoiceSummaryWithDateOperationCompleted(object arg) {
            if ((this.GetInvoiceSummaryWithDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInvoiceSummaryWithDateCompleted(this, new GetInvoiceSummaryWithDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetInvoiceCountWithDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InvoiceCountResultWithDate GetInvoiceCountWithDate(string Ticket, System.DateTime startDate, System.DateTime endDate, int dateType, bool getDraftInvoiceCount, bool withStatus) {
            object[] results = this.Invoke("GetInvoiceCountWithDate", new object[] {
                        Ticket,
                        startDate,
                        endDate,
                        dateType,
                        getDraftInvoiceCount,
                        withStatus});
            return ((InvoiceCountResultWithDate)(results[0]));
        }
        
        /// <remarks/>
        public void GetInvoiceCountWithDateAsync(string Ticket, System.DateTime startDate, System.DateTime endDate, int dateType, bool getDraftInvoiceCount, bool withStatus) {
            this.GetInvoiceCountWithDateAsync(Ticket, startDate, endDate, dateType, getDraftInvoiceCount, withStatus, null);
        }
        
        /// <remarks/>
        public void GetInvoiceCountWithDateAsync(string Ticket, System.DateTime startDate, System.DateTime endDate, int dateType, bool getDraftInvoiceCount, bool withStatus, object userState) {
            if ((this.GetInvoiceCountWithDateOperationCompleted == null)) {
                this.GetInvoiceCountWithDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInvoiceCountWithDateOperationCompleted);
            }
            this.InvokeAsync("GetInvoiceCountWithDate", new object[] {
                        Ticket,
                        startDate,
                        endDate,
                        dateType,
                        getDraftInvoiceCount,
                        withStatus}, this.GetInvoiceCountWithDateOperationCompleted, userState);
        }
        
        private void OnGetInvoiceCountWithDateOperationCompleted(object arg) {
            if ((this.GetInvoiceCountWithDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInvoiceCountWithDateCompleted(this, new GetInvoiceCountWithDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCustomerDifferenceXml", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CustomerInfoResult GetCustomerDifferenceXml(string Ticket, string xmlData) {
            object[] results = this.Invoke("GetCustomerDifferenceXml", new object[] {
                        Ticket,
                        xmlData});
            return ((CustomerInfoResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerDifferenceXmlAsync(string Ticket, string xmlData) {
            this.GetCustomerDifferenceXmlAsync(Ticket, xmlData, null);
        }
        
        /// <remarks/>
        public void GetCustomerDifferenceXmlAsync(string Ticket, string xmlData, object userState) {
            if ((this.GetCustomerDifferenceXmlOperationCompleted == null)) {
                this.GetCustomerDifferenceXmlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerDifferenceXmlOperationCompleted);
            }
            this.InvokeAsync("GetCustomerDifferenceXml", new object[] {
                        Ticket,
                        xmlData}, this.GetCustomerDifferenceXmlOperationCompleted, userState);
        }
        
        private void OnGetCustomerDifferenceXmlOperationCompleted(object arg) {
            if ((this.GetCustomerDifferenceXmlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerDifferenceXmlCompleted(this, new GetCustomerDifferenceXmlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCustomerDifferenceBase64Xml", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CustomerInfoResult GetCustomerDifferenceBase64Xml(string Ticket, string xmlData) {
            object[] results = this.Invoke("GetCustomerDifferenceBase64Xml", new object[] {
                        Ticket,
                        xmlData});
            return ((CustomerInfoResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerDifferenceBase64XmlAsync(string Ticket, string xmlData) {
            this.GetCustomerDifferenceBase64XmlAsync(Ticket, xmlData, null);
        }
        
        /// <remarks/>
        public void GetCustomerDifferenceBase64XmlAsync(string Ticket, string xmlData, object userState) {
            if ((this.GetCustomerDifferenceBase64XmlOperationCompleted == null)) {
                this.GetCustomerDifferenceBase64XmlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerDifferenceBase64XmlOperationCompleted);
            }
            this.InvokeAsync("GetCustomerDifferenceBase64Xml", new object[] {
                        Ticket,
                        xmlData}, this.GetCustomerDifferenceBase64XmlOperationCompleted, userState);
        }
        
        private void OnGetCustomerDifferenceBase64XmlOperationCompleted(object arg) {
            if ((this.GetCustomerDifferenceBase64XmlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerDifferenceBase64XmlCompleted(this, new GetCustomerDifferenceBase64XmlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LogServerStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ServerStatusResult LogServerStatus(System.DateTime accessDate, string corpCode, string message, string messageDescriptor) {
            object[] results = this.Invoke("LogServerStatus", new object[] {
                        accessDate,
                        corpCode,
                        message,
                        messageDescriptor});
            return ((ServerStatusResult)(results[0]));
        }
        
        /// <remarks/>
        public void LogServerStatusAsync(System.DateTime accessDate, string corpCode, string message, string messageDescriptor) {
            this.LogServerStatusAsync(accessDate, corpCode, message, messageDescriptor, null);
        }
        
        /// <remarks/>
        public void LogServerStatusAsync(System.DateTime accessDate, string corpCode, string message, string messageDescriptor, object userState) {
            if ((this.LogServerStatusOperationCompleted == null)) {
                this.LogServerStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogServerStatusOperationCompleted);
            }
            this.InvokeAsync("LogServerStatus", new object[] {
                        accessDate,
                        corpCode,
                        message,
                        messageDescriptor}, this.LogServerStatusOperationCompleted, userState);
        }
        
        private void OnLogServerStatusOperationCompleted(object arg) {
            if ((this.LogServerStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogServerStatusCompleted(this, new LogServerStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAvailableSentInvoicesByDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InvoicePackResult GetAvailableSentInvoicesByDate(string Ticket, string CorporateCode, System.DateTime StartDate, System.DateTime EndDate) {
            object[] results = this.Invoke("GetAvailableSentInvoicesByDate", new object[] {
                        Ticket,
                        CorporateCode,
                        StartDate,
                        EndDate});
            return ((InvoicePackResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvailableSentInvoicesByDateAsync(string Ticket, string CorporateCode, System.DateTime StartDate, System.DateTime EndDate) {
            this.GetAvailableSentInvoicesByDateAsync(Ticket, CorporateCode, StartDate, EndDate, null);
        }
        
        /// <remarks/>
        public void GetAvailableSentInvoicesByDateAsync(string Ticket, string CorporateCode, System.DateTime StartDate, System.DateTime EndDate, object userState) {
            if ((this.GetAvailableSentInvoicesByDateOperationCompleted == null)) {
                this.GetAvailableSentInvoicesByDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvailableSentInvoicesByDateOperationCompleted);
            }
            this.InvokeAsync("GetAvailableSentInvoicesByDate", new object[] {
                        Ticket,
                        CorporateCode,
                        StartDate,
                        EndDate}, this.GetAvailableSentInvoicesByDateOperationCompleted, userState);
        }
        
        private void OnGetAvailableSentInvoicesByDateOperationCompleted(object arg) {
            if ((this.GetAvailableSentInvoicesByDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvailableSentInvoicesByDateCompleted(this, new GetAvailableSentInvoicesByDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAvailableSentInvoicesByIssueDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InvoicePackResult GetAvailableSentInvoicesByIssueDate(string Ticket, string CorporateCode, System.DateTime StartDate, System.DateTime EndDate) {
            object[] results = this.Invoke("GetAvailableSentInvoicesByIssueDate", new object[] {
                        Ticket,
                        CorporateCode,
                        StartDate,
                        EndDate});
            return ((InvoicePackResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvailableSentInvoicesByIssueDateAsync(string Ticket, string CorporateCode, System.DateTime StartDate, System.DateTime EndDate) {
            this.GetAvailableSentInvoicesByIssueDateAsync(Ticket, CorporateCode, StartDate, EndDate, null);
        }
        
        /// <remarks/>
        public void GetAvailableSentInvoicesByIssueDateAsync(string Ticket, string CorporateCode, System.DateTime StartDate, System.DateTime EndDate, object userState) {
            if ((this.GetAvailableSentInvoicesByIssueDateOperationCompleted == null)) {
                this.GetAvailableSentInvoicesByIssueDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvailableSentInvoicesByIssueDateOperationCompleted);
            }
            this.InvokeAsync("GetAvailableSentInvoicesByIssueDate", new object[] {
                        Ticket,
                        CorporateCode,
                        StartDate,
                        EndDate}, this.GetAvailableSentInvoicesByIssueDateOperationCompleted, userState);
        }
        
        private void OnGetAvailableSentInvoicesByIssueDateOperationCompleted(object arg) {
            if ((this.GetAvailableSentInvoicesByIssueDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvailableSentInvoicesByIssueDateCompleted(this, new GetAvailableSentInvoicesByIssueDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ProcessDataWithCode", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DBJobProcessResult ProcessDataWithCode(string Ticket, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] fileContent, UUIDFileType fileType, string code, Direction direction) {
            object[] results = this.Invoke("ProcessDataWithCode", new object[] {
                        Ticket,
                        fileContent,
                        fileType,
                        code,
                        direction});
            return ((DBJobProcessResult)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessDataWithCodeAsync(string Ticket, byte[] fileContent, UUIDFileType fileType, string code, Direction direction) {
            this.ProcessDataWithCodeAsync(Ticket, fileContent, fileType, code, direction, null);
        }
        
        /// <remarks/>
        public void ProcessDataWithCodeAsync(string Ticket, byte[] fileContent, UUIDFileType fileType, string code, Direction direction, object userState) {
            if ((this.ProcessDataWithCodeOperationCompleted == null)) {
                this.ProcessDataWithCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessDataWithCodeOperationCompleted);
            }
            this.InvokeAsync("ProcessDataWithCode", new object[] {
                        Ticket,
                        fileContent,
                        fileType,
                        code,
                        direction}, this.ProcessDataWithCodeOperationCompleted, userState);
        }
        
        private void OnProcessDataWithCodeOperationCompleted(object arg) {
            if ((this.ProcessDataWithCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessDataWithCodeCompleted(this, new ProcessDataWithCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetHashOfInvoice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GetHashOfInvoiceResult GetHashOfInvoice(string Ticket, string UUID, Direction InvoiceDirection) {
            object[] results = this.Invoke("GetHashOfInvoice", new object[] {
                        Ticket,
                        UUID,
                        InvoiceDirection});
            return ((GetHashOfInvoiceResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetHashOfInvoiceAsync(string Ticket, string UUID, Direction InvoiceDirection) {
            this.GetHashOfInvoiceAsync(Ticket, UUID, InvoiceDirection, null);
        }
        
        /// <remarks/>
        public void GetHashOfInvoiceAsync(string Ticket, string UUID, Direction InvoiceDirection, object userState) {
            if ((this.GetHashOfInvoiceOperationCompleted == null)) {
                this.GetHashOfInvoiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHashOfInvoiceOperationCompleted);
            }
            this.InvokeAsync("GetHashOfInvoice", new object[] {
                        Ticket,
                        UUID,
                        InvoiceDirection}, this.GetHashOfInvoiceOperationCompleted, userState);
        }
        
        private void OnGetHashOfInvoiceOperationCompleted(object arg) {
            if ((this.GetHashOfInvoiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHashOfInvoiceCompleted(this, new GetHashOfInvoiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetEArchiveInvoicesByDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InvoicePackResult GetEArchiveInvoicesByDate(string Ticket, System.DateTime StartDate, System.DateTime EndDate) {
            object[] results = this.Invoke("GetEArchiveInvoicesByDate", new object[] {
                        Ticket,
                        StartDate,
                        EndDate});
            return ((InvoicePackResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetEArchiveInvoicesByDateAsync(string Ticket, System.DateTime StartDate, System.DateTime EndDate) {
            this.GetEArchiveInvoicesByDateAsync(Ticket, StartDate, EndDate, null);
        }
        
        /// <remarks/>
        public void GetEArchiveInvoicesByDateAsync(string Ticket, System.DateTime StartDate, System.DateTime EndDate, object userState) {
            if ((this.GetEArchiveInvoicesByDateOperationCompleted == null)) {
                this.GetEArchiveInvoicesByDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEArchiveInvoicesByDateOperationCompleted);
            }
            this.InvokeAsync("GetEArchiveInvoicesByDate", new object[] {
                        Ticket,
                        StartDate,
                        EndDate}, this.GetEArchiveInvoicesByDateOperationCompleted, userState);
        }
        
        private void OnGetEArchiveInvoicesByDateOperationCompleted(object arg) {
            if ((this.GetEArchiveInvoicesByDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEArchiveInvoicesByDateCompleted(this, new GetEArchiveInvoicesByDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetEArchiveInvoicesWithDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InvoicePackResult GetEArchiveInvoicesWithDate(string Ticket, System.DateTime StartDate, System.DateTime EndDate) {
            object[] results = this.Invoke("GetEArchiveInvoicesWithDate", new object[] {
                        Ticket,
                        StartDate,
                        EndDate});
            return ((InvoicePackResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetEArchiveInvoicesWithDateAsync(string Ticket, System.DateTime StartDate, System.DateTime EndDate) {
            this.GetEArchiveInvoicesWithDateAsync(Ticket, StartDate, EndDate, null);
        }
        
        /// <remarks/>
        public void GetEArchiveInvoicesWithDateAsync(string Ticket, System.DateTime StartDate, System.DateTime EndDate, object userState) {
            if ((this.GetEArchiveInvoicesWithDateOperationCompleted == null)) {
                this.GetEArchiveInvoicesWithDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEArchiveInvoicesWithDateOperationCompleted);
            }
            this.InvokeAsync("GetEArchiveInvoicesWithDate", new object[] {
                        Ticket,
                        StartDate,
                        EndDate}, this.GetEArchiveInvoicesWithDateOperationCompleted, userState);
        }
        
        private void OnGetEArchiveInvoicesWithDateOperationCompleted(object arg) {
            if ((this.GetEArchiveInvoicesWithDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEArchiveInvoicesWithDateCompleted(this, new GetEArchiveInvoicesWithDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetEArchiveInvoicesWithIssueDateAndTaxNumber", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InvoicePackResult GetEArchiveInvoicesWithIssueDateAndTaxNumber(string Ticket, System.DateTime StartDate, System.DateTime EndDate, string TaxId) {
            object[] results = this.Invoke("GetEArchiveInvoicesWithIssueDateAndTaxNumber", new object[] {
                        Ticket,
                        StartDate,
                        EndDate,
                        TaxId});
            return ((InvoicePackResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetEArchiveInvoicesWithIssueDateAndTaxNumberAsync(string Ticket, System.DateTime StartDate, System.DateTime EndDate, string TaxId) {
            this.GetEArchiveInvoicesWithIssueDateAndTaxNumberAsync(Ticket, StartDate, EndDate, TaxId, null);
        }
        
        /// <remarks/>
        public void GetEArchiveInvoicesWithIssueDateAndTaxNumberAsync(string Ticket, System.DateTime StartDate, System.DateTime EndDate, string TaxId, object userState) {
            if ((this.GetEArchiveInvoicesWithIssueDateAndTaxNumberOperationCompleted == null)) {
                this.GetEArchiveInvoicesWithIssueDateAndTaxNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEArchiveInvoicesWithIssueDateAndTaxNumberOperationCompleted);
            }
            this.InvokeAsync("GetEArchiveInvoicesWithIssueDateAndTaxNumber", new object[] {
                        Ticket,
                        StartDate,
                        EndDate,
                        TaxId}, this.GetEArchiveInvoicesWithIssueDateAndTaxNumberOperationCompleted, userState);
        }
        
        private void OnGetEArchiveInvoicesWithIssueDateAndTaxNumberOperationCompleted(object arg) {
            if ((this.GetEArchiveInvoicesWithIssueDateAndTaxNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEArchiveInvoicesWithIssueDateAndTaxNumberCompleted(this, new GetEArchiveInvoicesWithIssueDateAndTaxNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetInvoiceHTML", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InvoiceInfoResult GetInvoiceHTML(string Ticket, string uuid, Direction direction) {
            object[] results = this.Invoke("GetInvoiceHTML", new object[] {
                        Ticket,
                        uuid,
                        direction});
            return ((InvoiceInfoResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetInvoiceHTMLAsync(string Ticket, string uuid, Direction direction) {
            this.GetInvoiceHTMLAsync(Ticket, uuid, direction, null);
        }
        
        /// <remarks/>
        public void GetInvoiceHTMLAsync(string Ticket, string uuid, Direction direction, object userState) {
            if ((this.GetInvoiceHTMLOperationCompleted == null)) {
                this.GetInvoiceHTMLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInvoiceHTMLOperationCompleted);
            }
            this.InvokeAsync("GetInvoiceHTML", new object[] {
                        Ticket,
                        uuid,
                        direction}, this.GetInvoiceHTMLOperationCompleted, userState);
        }
        
        private void OnGetInvoiceHTMLOperationCompleted(object arg) {
            if ((this.GetInvoiceHTMLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInvoiceHTMLCompleted(this, new GetInvoiceHTMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetEArchiveInvoicesByReportNo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InvoicePackResult GetEArchiveInvoicesByReportNo(string ticket, string reportNo) {
            object[] results = this.Invoke("GetEArchiveInvoicesByReportNo", new object[] {
                        ticket,
                        reportNo});
            return ((InvoicePackResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetEArchiveInvoicesByReportNoAsync(string ticket, string reportNo) {
            this.GetEArchiveInvoicesByReportNoAsync(ticket, reportNo, null);
        }
        
        /// <remarks/>
        public void GetEArchiveInvoicesByReportNoAsync(string ticket, string reportNo, object userState) {
            if ((this.GetEArchiveInvoicesByReportNoOperationCompleted == null)) {
                this.GetEArchiveInvoicesByReportNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEArchiveInvoicesByReportNoOperationCompleted);
            }
            this.InvokeAsync("GetEArchiveInvoicesByReportNo", new object[] {
                        ticket,
                        reportNo}, this.GetEArchiveInvoicesByReportNoOperationCompleted, userState);
        }
        
        private void OnGetEArchiveInvoicesByReportNoOperationCompleted(object arg) {
            if ((this.GetEArchiveInvoicesByReportNoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEArchiveInvoicesByReportNoCompleted(this, new GetEArchiveInvoicesByReportNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendInvoiceAsEmail", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SendEMailResult SendInvoiceAsEmail(string ticket, string sender, string receiver, string uuid, Direction direction) {
            object[] results = this.Invoke("SendInvoiceAsEmail", new object[] {
                        ticket,
                        sender,
                        receiver,
                        uuid,
                        direction});
            return ((SendEMailResult)(results[0]));
        }
        
        /// <remarks/>
        public void SendInvoiceAsEmailAsync(string ticket, string sender, string receiver, string uuid, Direction direction) {
            this.SendInvoiceAsEmailAsync(ticket, sender, receiver, uuid, direction, null);
        }
        
        /// <remarks/>
        public void SendInvoiceAsEmailAsync(string ticket, string sender, string receiver, string uuid, Direction direction, object userState) {
            if ((this.SendInvoiceAsEmailOperationCompleted == null)) {
                this.SendInvoiceAsEmailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendInvoiceAsEmailOperationCompleted);
            }
            this.InvokeAsync("SendInvoiceAsEmail", new object[] {
                        ticket,
                        sender,
                        receiver,
                        uuid,
                        direction}, this.SendInvoiceAsEmailOperationCompleted, userState);
        }
        
        private void OnSendInvoiceAsEmailOperationCompleted(object arg) {
            if ((this.SendInvoiceAsEmailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendInvoiceAsEmailCompleted(this, new SendInvoiceAsEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetNewInvoiceId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InvoiceIdResult GetNewInvoiceId(string Ticket, string TemplateCode, int Year, int InvoiceType, string reconciliationid) {
            object[] results = this.Invoke("GetNewInvoiceId", new object[] {
                        Ticket,
                        TemplateCode,
                        Year,
                        InvoiceType,
                        reconciliationid});
            return ((InvoiceIdResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetNewInvoiceIdAsync(string Ticket, string TemplateCode, int Year, int InvoiceType, string reconciliationid) {
            this.GetNewInvoiceIdAsync(Ticket, TemplateCode, Year, InvoiceType, reconciliationid, null);
        }
        
        /// <remarks/>
        public void GetNewInvoiceIdAsync(string Ticket, string TemplateCode, int Year, int InvoiceType, string reconciliationid, object userState) {
            if ((this.GetNewInvoiceIdOperationCompleted == null)) {
                this.GetNewInvoiceIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNewInvoiceIdOperationCompleted);
            }
            this.InvokeAsync("GetNewInvoiceId", new object[] {
                        Ticket,
                        TemplateCode,
                        Year,
                        InvoiceType,
                        reconciliationid}, this.GetNewInvoiceIdOperationCompleted, userState);
        }
        
        private void OnGetNewInvoiceIdOperationCompleted(object arg) {
            if ((this.GetNewInvoiceIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNewInvoiceIdCompleted(this, new GetNewInvoiceIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetReconciliationEArchiveByDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public eArchiveReconciliationPackResult GetReconciliationEArchiveByDate(string Ticket, string CorporateCode, eArchiveReconciliationInvoices[] eArchiveInvoices, System.DateTime StartDate, System.DateTime EndDate) {
            object[] results = this.Invoke("GetReconciliationEArchiveByDate", new object[] {
                        Ticket,
                        CorporateCode,
                        eArchiveInvoices,
                        StartDate,
                        EndDate});
            return ((eArchiveReconciliationPackResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetReconciliationEArchiveByDateAsync(string Ticket, string CorporateCode, eArchiveReconciliationInvoices[] eArchiveInvoices, System.DateTime StartDate, System.DateTime EndDate) {
            this.GetReconciliationEArchiveByDateAsync(Ticket, CorporateCode, eArchiveInvoices, StartDate, EndDate, null);
        }
        
        /// <remarks/>
        public void GetReconciliationEArchiveByDateAsync(string Ticket, string CorporateCode, eArchiveReconciliationInvoices[] eArchiveInvoices, System.DateTime StartDate, System.DateTime EndDate, object userState) {
            if ((this.GetReconciliationEArchiveByDateOperationCompleted == null)) {
                this.GetReconciliationEArchiveByDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReconciliationEArchiveByDateOperationCompleted);
            }
            this.InvokeAsync("GetReconciliationEArchiveByDate", new object[] {
                        Ticket,
                        CorporateCode,
                        eArchiveInvoices,
                        StartDate,
                        EndDate}, this.GetReconciliationEArchiveByDateOperationCompleted, userState);
        }
        
        private void OnGetReconciliationEArchiveByDateOperationCompleted(object arg) {
            if ((this.GetReconciliationEArchiveByDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReconciliationEArchiveByDateCompleted(this, new GetReconciliationEArchiveByDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetReconciliationEArchiveByDateExtended", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public eArchiveReconciliationPackResult GetReconciliationEArchiveByDateExtended(string Ticket, string CorporateCode, eArchiveReconciliationInvoices[] eArchiveInvoices, System.DateTime StartDate, System.DateTime EndDate, string StoreNumber, string WorkStation) {
            object[] results = this.Invoke("GetReconciliationEArchiveByDateExtended", new object[] {
                        Ticket,
                        CorporateCode,
                        eArchiveInvoices,
                        StartDate,
                        EndDate,
                        StoreNumber,
                        WorkStation});
            return ((eArchiveReconciliationPackResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetReconciliationEArchiveByDateExtendedAsync(string Ticket, string CorporateCode, eArchiveReconciliationInvoices[] eArchiveInvoices, System.DateTime StartDate, System.DateTime EndDate, string StoreNumber, string WorkStation) {
            this.GetReconciliationEArchiveByDateExtendedAsync(Ticket, CorporateCode, eArchiveInvoices, StartDate, EndDate, StoreNumber, WorkStation, null);
        }
        
        /// <remarks/>
        public void GetReconciliationEArchiveByDateExtendedAsync(string Ticket, string CorporateCode, eArchiveReconciliationInvoices[] eArchiveInvoices, System.DateTime StartDate, System.DateTime EndDate, string StoreNumber, string WorkStation, object userState) {
            if ((this.GetReconciliationEArchiveByDateExtendedOperationCompleted == null)) {
                this.GetReconciliationEArchiveByDateExtendedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReconciliationEArchiveByDateExtendedOperationCompleted);
            }
            this.InvokeAsync("GetReconciliationEArchiveByDateExtended", new object[] {
                        Ticket,
                        CorporateCode,
                        eArchiveInvoices,
                        StartDate,
                        EndDate,
                        StoreNumber,
                        WorkStation}, this.GetReconciliationEArchiveByDateExtendedOperationCompleted, userState);
        }
        
        private void OnGetReconciliationEArchiveByDateExtendedOperationCompleted(object arg) {
            if ((this.GetReconciliationEArchiveByDateExtendedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReconciliationEArchiveByDateExtendedCompleted(this, new GetReconciliationEArchiveByDateExtendedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetGTBRefAndRegisterNumber", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GTBRefAndRegNoResult GetGTBRefAndRegisterNumber(string Ticket, string invoiceuuid) {
            object[] results = this.Invoke("GetGTBRefAndRegisterNumber", new object[] {
                        Ticket,
                        invoiceuuid});
            return ((GTBRefAndRegNoResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetGTBRefAndRegisterNumberAsync(string Ticket, string invoiceuuid) {
            this.GetGTBRefAndRegisterNumberAsync(Ticket, invoiceuuid, null);
        }
        
        /// <remarks/>
        public void GetGTBRefAndRegisterNumberAsync(string Ticket, string invoiceuuid, object userState) {
            if ((this.GetGTBRefAndRegisterNumberOperationCompleted == null)) {
                this.GetGTBRefAndRegisterNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGTBRefAndRegisterNumberOperationCompleted);
            }
            this.InvokeAsync("GetGTBRefAndRegisterNumber", new object[] {
                        Ticket,
                        invoiceuuid}, this.GetGTBRefAndRegisterNumberOperationCompleted, userState);
        }
        
        private void OnGetGTBRefAndRegisterNumberOperationCompleted(object arg) {
            if ((this.GetGTBRefAndRegisterNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetGTBRefAndRegisterNumberCompleted(this, new GetGTBRefAndRegisterNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendTaxFreeInvoiceData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EnvelopeStateResult SendTaxFreeInvoiceData(string Ticket, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] InvoiceRawData, string CorporateCode, string TemplateCode) {
            object[] results = this.Invoke("SendTaxFreeInvoiceData", new object[] {
                        Ticket,
                        InvoiceRawData,
                        CorporateCode,
                        TemplateCode});
            return ((EnvelopeStateResult)(results[0]));
        }
        
        /// <remarks/>
        public void SendTaxFreeInvoiceDataAsync(string Ticket, byte[] InvoiceRawData, string CorporateCode, string TemplateCode) {
            this.SendTaxFreeInvoiceDataAsync(Ticket, InvoiceRawData, CorporateCode, TemplateCode, null);
        }
        
        /// <remarks/>
        public void SendTaxFreeInvoiceDataAsync(string Ticket, byte[] InvoiceRawData, string CorporateCode, string TemplateCode, object userState) {
            if ((this.SendTaxFreeInvoiceDataOperationCompleted == null)) {
                this.SendTaxFreeInvoiceDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendTaxFreeInvoiceDataOperationCompleted);
            }
            this.InvokeAsync("SendTaxFreeInvoiceData", new object[] {
                        Ticket,
                        InvoiceRawData,
                        CorporateCode,
                        TemplateCode}, this.SendTaxFreeInvoiceDataOperationCompleted, userState);
        }
        
        private void OnSendTaxFreeInvoiceDataOperationCompleted(object arg) {
            if ((this.SendTaxFreeInvoiceDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendTaxFreeInvoiceDataCompleted(this, new SendTaxFreeInvoiceDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CancelInvoiceDataForTaxFree", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResponseResult CancelInvoiceDataForTaxFree(string Ticket, string UUID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<System.DateTime> CancelInvoiceDateTime, string ExpenseSlipNumber, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<System.DateTime> ExpenseSlipDate) {
            object[] results = this.Invoke("CancelInvoiceDataForTaxFree", new object[] {
                        Ticket,
                        UUID,
                        CancelInvoiceDateTime,
                        ExpenseSlipNumber,
                        ExpenseSlipDate});
            return ((ResponseResult)(results[0]));
        }
        
        /// <remarks/>
        public void CancelInvoiceDataForTaxFreeAsync(string Ticket, string UUID, System.Nullable<System.DateTime> CancelInvoiceDateTime, string ExpenseSlipNumber, System.Nullable<System.DateTime> ExpenseSlipDate) {
            this.CancelInvoiceDataForTaxFreeAsync(Ticket, UUID, CancelInvoiceDateTime, ExpenseSlipNumber, ExpenseSlipDate, null);
        }
        
        /// <remarks/>
        public void CancelInvoiceDataForTaxFreeAsync(string Ticket, string UUID, System.Nullable<System.DateTime> CancelInvoiceDateTime, string ExpenseSlipNumber, System.Nullable<System.DateTime> ExpenseSlipDate, object userState) {
            if ((this.CancelInvoiceDataForTaxFreeOperationCompleted == null)) {
                this.CancelInvoiceDataForTaxFreeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelInvoiceDataForTaxFreeOperationCompleted);
            }
            this.InvokeAsync("CancelInvoiceDataForTaxFree", new object[] {
                        Ticket,
                        UUID,
                        CancelInvoiceDateTime,
                        ExpenseSlipNumber,
                        ExpenseSlipDate}, this.CancelInvoiceDataForTaxFreeOperationCompleted, userState);
        }
        
        private void OnCancelInvoiceDataForTaxFreeOperationCompleted(object arg) {
            if ((this.CancelInvoiceDataForTaxFreeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelInvoiceDataForTaxFreeCompleted(this, new CancelInvoiceDataForTaxFreeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadFromArchiveEArchive", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EArchiveStateResult UploadFromArchiveEArchive(string Ticket, File FileType, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] InvoiceRawData, string CorporateCode) {
            object[] results = this.Invoke("UploadFromArchiveEArchive", new object[] {
                        Ticket,
                        FileType,
                        InvoiceRawData,
                        CorporateCode});
            return ((EArchiveStateResult)(results[0]));
        }
        
        /// <remarks/>
        public void UploadFromArchiveEArchiveAsync(string Ticket, File FileType, byte[] InvoiceRawData, string CorporateCode) {
            this.UploadFromArchiveEArchiveAsync(Ticket, FileType, InvoiceRawData, CorporateCode, null);
        }
        
        /// <remarks/>
        public void UploadFromArchiveEArchiveAsync(string Ticket, File FileType, byte[] InvoiceRawData, string CorporateCode, object userState) {
            if ((this.UploadFromArchiveEArchiveOperationCompleted == null)) {
                this.UploadFromArchiveEArchiveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadFromArchiveEArchiveOperationCompleted);
            }
            this.InvokeAsync("UploadFromArchiveEArchive", new object[] {
                        Ticket,
                        FileType,
                        InvoiceRawData,
                        CorporateCode}, this.UploadFromArchiveEArchiveOperationCompleted, userState);
        }
        
        private void OnUploadFromArchiveEArchiveOperationCompleted(object arg) {
            if ((this.UploadFromArchiveEArchiveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadFromArchiveEArchiveCompleted(this, new UploadFromArchiveEArchiveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadFromArchiveEArchiveReport", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EArchiveStateResult UploadFromArchiveEArchiveReport(string Ticket, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] reportData, string CorporateCode) {
            object[] results = this.Invoke("UploadFromArchiveEArchiveReport", new object[] {
                        Ticket,
                        reportData,
                        CorporateCode});
            return ((EArchiveStateResult)(results[0]));
        }
        
        /// <remarks/>
        public void UploadFromArchiveEArchiveReportAsync(string Ticket, byte[] reportData, string CorporateCode) {
            this.UploadFromArchiveEArchiveReportAsync(Ticket, reportData, CorporateCode, null);
        }
        
        /// <remarks/>
        public void UploadFromArchiveEArchiveReportAsync(string Ticket, byte[] reportData, string CorporateCode, object userState) {
            if ((this.UploadFromArchiveEArchiveReportOperationCompleted == null)) {
                this.UploadFromArchiveEArchiveReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadFromArchiveEArchiveReportOperationCompleted);
            }
            this.InvokeAsync("UploadFromArchiveEArchiveReport", new object[] {
                        Ticket,
                        reportData,
                        CorporateCode}, this.UploadFromArchiveEArchiveReportOperationCompleted, userState);
        }
        
        private void OnUploadFromArchiveEArchiveReportOperationCompleted(object arg) {
            if ((this.UploadFromArchiveEArchiveReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadFromArchiveEArchiveReportCompleted(this, new UploadFromArchiveEArchiveReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetIncomingInvoiceBranchInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InvoicesInfoResult GetIncomingInvoiceBranchInfo(string Ticket, InvoiceInfoQuery[] Invoices) {
            object[] results = this.Invoke("GetIncomingInvoiceBranchInfo", new object[] {
                        Ticket,
                        Invoices});
            return ((InvoicesInfoResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetIncomingInvoiceBranchInfoAsync(string Ticket, InvoiceInfoQuery[] Invoices) {
            this.GetIncomingInvoiceBranchInfoAsync(Ticket, Invoices, null);
        }
        
        /// <remarks/>
        public void GetIncomingInvoiceBranchInfoAsync(string Ticket, InvoiceInfoQuery[] Invoices, object userState) {
            if ((this.GetIncomingInvoiceBranchInfoOperationCompleted == null)) {
                this.GetIncomingInvoiceBranchInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIncomingInvoiceBranchInfoOperationCompleted);
            }
            this.InvokeAsync("GetIncomingInvoiceBranchInfo", new object[] {
                        Ticket,
                        Invoices}, this.GetIncomingInvoiceBranchInfoOperationCompleted, userState);
        }
        
        private void OnGetIncomingInvoiceBranchInfoOperationCompleted(object arg) {
            if ((this.GetIncomingInvoiceBranchInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIncomingInvoiceBranchInfoCompleted(this, new GetIncomingInvoiceBranchInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateEnvelopeStatusFromGib", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InvoicePackResult UpdateEnvelopeStatusFromGib(string Ticket, string UUID) {
            object[] results = this.Invoke("UpdateEnvelopeStatusFromGib", new object[] {
                        Ticket,
                        UUID});
            return ((InvoicePackResult)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateEnvelopeStatusFromGibAsync(string Ticket, string UUID) {
            this.UpdateEnvelopeStatusFromGibAsync(Ticket, UUID, null);
        }
        
        /// <remarks/>
        public void UpdateEnvelopeStatusFromGibAsync(string Ticket, string UUID, object userState) {
            if ((this.UpdateEnvelopeStatusFromGibOperationCompleted == null)) {
                this.UpdateEnvelopeStatusFromGibOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateEnvelopeStatusFromGibOperationCompleted);
            }
            this.InvokeAsync("UpdateEnvelopeStatusFromGib", new object[] {
                        Ticket,
                        UUID}, this.UpdateEnvelopeStatusFromGibOperationCompleted, userState);
        }
        
        private void OnUpdateEnvelopeStatusFromGibOperationCompleted(object arg) {
            if ((this.UpdateEnvelopeStatusFromGibCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateEnvelopeStatusFromGibCompleted(this, new UpdateEnvelopeStatusFromGibCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/OutSidersSendEmail", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public OutSidersEMailResult OutSidersSendEmail(string ticket, OutsiderMailMessage message) {
            object[] results = this.Invoke("OutSidersSendEmail", new object[] {
                        ticket,
                        message});
            return ((OutSidersEMailResult)(results[0]));
        }
        
        /// <remarks/>
        public void OutSidersSendEmailAsync(string ticket, OutsiderMailMessage message) {
            this.OutSidersSendEmailAsync(ticket, message, null);
        }
        
        /// <remarks/>
        public void OutSidersSendEmailAsync(string ticket, OutsiderMailMessage message, object userState) {
            if ((this.OutSidersSendEmailOperationCompleted == null)) {
                this.OutSidersSendEmailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOutSidersSendEmailOperationCompleted);
            }
            this.InvokeAsync("OutSidersSendEmail", new object[] {
                        ticket,
                        message}, this.OutSidersSendEmailOperationCompleted, userState);
        }
        
        private void OnOutSidersSendEmailOperationCompleted(object arg) {
            if ((this.OutSidersSendEmailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OutSidersSendEmailCompleted(this, new OutSidersSendEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PartnerAndCorporateContourInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ContourInfoListResult PartnerAndCorporateContourInfo(string ticket, string partnerCode, string corporateCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<ProductName> productName) {
            object[] results = this.Invoke("PartnerAndCorporateContourInfo", new object[] {
                        ticket,
                        partnerCode,
                        corporateCode,
                        productName});
            return ((ContourInfoListResult)(results[0]));
        }
        
        /// <remarks/>
        public void PartnerAndCorporateContourInfoAsync(string ticket, string partnerCode, string corporateCode, System.Nullable<ProductName> productName) {
            this.PartnerAndCorporateContourInfoAsync(ticket, partnerCode, corporateCode, productName, null);
        }
        
        /// <remarks/>
        public void PartnerAndCorporateContourInfoAsync(string ticket, string partnerCode, string corporateCode, System.Nullable<ProductName> productName, object userState) {
            if ((this.PartnerAndCorporateContourInfoOperationCompleted == null)) {
                this.PartnerAndCorporateContourInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPartnerAndCorporateContourInfoOperationCompleted);
            }
            this.InvokeAsync("PartnerAndCorporateContourInfo", new object[] {
                        ticket,
                        partnerCode,
                        corporateCode,
                        productName}, this.PartnerAndCorporateContourInfoOperationCompleted, userState);
        }
        
        private void OnPartnerAndCorporateContourInfoOperationCompleted(object arg) {
            if ((this.PartnerAndCorporateContourInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PartnerAndCorporateContourInfoCompleted(this, new PartnerAndCorporateContourInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CorporateContourInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ContourInfoListResult CorporateContourInfo(string ticket, string corporateCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<ProductName> productName) {
            object[] results = this.Invoke("CorporateContourInfo", new object[] {
                        ticket,
                        corporateCode,
                        productName});
            return ((ContourInfoListResult)(results[0]));
        }
        
        /// <remarks/>
        public void CorporateContourInfoAsync(string ticket, string corporateCode, System.Nullable<ProductName> productName) {
            this.CorporateContourInfoAsync(ticket, corporateCode, productName, null);
        }
        
        /// <remarks/>
        public void CorporateContourInfoAsync(string ticket, string corporateCode, System.Nullable<ProductName> productName, object userState) {
            if ((this.CorporateContourInfoOperationCompleted == null)) {
                this.CorporateContourInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCorporateContourInfoOperationCompleted);
            }
            this.InvokeAsync("CorporateContourInfo", new object[] {
                        ticket,
                        corporateCode,
                        productName}, this.CorporateContourInfoOperationCompleted, userState);
        }
        
        private void OnCorporateContourInfoOperationCompleted(object arg) {
            if ((this.CorporateContourInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CorporateContourInfoCompleted(this, new CorporateContourInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class ApplicationResponsePackResult {
        
        private Result serviceResultField;
        
        private string serviceResultDescriptionField;
        
        private int errorCodeField;
        
        private string[] invoicesField;
        
        /// <remarks/>
        public Result ServiceResult {
            get {
                return this.serviceResultField;
            }
            set {
                this.serviceResultField = value;
            }
        }
        
        /// <remarks/>
        public string ServiceResultDescription {
            get {
                return this.serviceResultDescriptionField;
            }
            set {
                this.serviceResultDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public int ErrorCode {
            get {
                return this.errorCodeField;
            }
            set {
                this.errorCodeField = value;
            }
        }
        
        /// <remarks/>
        public string[] Invoices {
            get {
                return this.invoicesField;
            }
            set {
                this.invoicesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum Result {
        
        /// <remarks/>
        Successful,
        
        /// <remarks/>
        Error,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class ContourInfo {
        
        private string corporateCodeField;
        
        private string partnerCodeField;
        
        private string agreementProductGroupField;
        
        private decimal agreementAmountField;
        
        private int usageAmountField;
        
        private decimal netAmountField;
        
        /// <remarks/>
        public string CorporateCode {
            get {
                return this.corporateCodeField;
            }
            set {
                this.corporateCodeField = value;
            }
        }
        
        /// <remarks/>
        public string PartnerCode {
            get {
                return this.partnerCodeField;
            }
            set {
                this.partnerCodeField = value;
            }
        }
        
        /// <remarks/>
        public string AgreementProductGroup {
            get {
                return this.agreementProductGroupField;
            }
            set {
                this.agreementProductGroupField = value;
            }
        }
        
        /// <remarks/>
        public decimal AgreementAmount {
            get {
                return this.agreementAmountField;
            }
            set {
                this.agreementAmountField = value;
            }
        }
        
        /// <remarks/>
        public int UsageAmount {
            get {
                return this.usageAmountField;
            }
            set {
                this.usageAmountField = value;
            }
        }
        
        /// <remarks/>
        public decimal NetAmount {
            get {
                return this.netAmountField;
            }
            set {
                this.netAmountField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class ContourInfoListResult {
        
        private Result serviceResultField;
        
        private string serviceResultDescriptionField;
        
        private int errorCodeField;
        
        private ContourInfo[] contourInfosField;
        
        /// <remarks/>
        public Result ServiceResult {
            get {
                return this.serviceResultField;
            }
            set {
                this.serviceResultField = value;
            }
        }
        
        /// <remarks/>
        public string ServiceResultDescription {
            get {
                return this.serviceResultDescriptionField;
            }
            set {
                this.serviceResultDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public int ErrorCode {
            get {
                return this.errorCodeField;
            }
            set {
                this.errorCodeField = value;
            }
        }
        
        /// <remarks/>
        public ContourInfo[] ContourInfos {
            get {
                return this.contourInfosField;
            }
            set {
                this.contourInfosField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class OutSidersEMailResult {
        
        private Result serviceResultField;
        
        private string serviceResultDescriptionField;
        
        private int errorCodeField;
        
        /// <remarks/>
        public Result ServiceResult {
            get {
                return this.serviceResultField;
            }
            set {
                this.serviceResultField = value;
            }
        }
        
        /// <remarks/>
        public string ServiceResultDescription {
            get {
                return this.serviceResultDescriptionField;
            }
            set {
                this.serviceResultDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public int ErrorCode {
            get {
                return this.errorCodeField;
            }
            set {
                this.errorCodeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class OutSiderMailMessageAttach {
        
        private string fileNameField;
        
        private string binaryDataField;
        
        /// <remarks/>
        public string FileName {
            get {
                return this.fileNameField;
            }
            set {
                this.fileNameField = value;
            }
        }
        
        /// <remarks/>
        public string binaryData {
            get {
                return this.binaryDataField;
            }
            set {
                this.binaryDataField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class OutsiderMailMessage {
        
        private string fromField;
        
        private string[] mailCCField;
        
        private string mailToField;
        
        private string subjectField;
        
        private string bodyField;
        
        private string eledgerParentField;
        
        private string mailDayDirectoryField;
        
        private OutSiderMailMessageAttach[] logFileAttachsField;
        
        /// <remarks/>
        public string From {
            get {
                return this.fromField;
            }
            set {
                this.fromField = value;
            }
        }
        
        /// <remarks/>
        public string[] MailCC {
            get {
                return this.mailCCField;
            }
            set {
                this.mailCCField = value;
            }
        }
        
        /// <remarks/>
        public string MailTo {
            get {
                return this.mailToField;
            }
            set {
                this.mailToField = value;
            }
        }
        
        /// <remarks/>
        public string Subject {
            get {
                return this.subjectField;
            }
            set {
                this.subjectField = value;
            }
        }
        
        /// <remarks/>
        public string Body {
            get {
                return this.bodyField;
            }
            set {
                this.bodyField = value;
            }
        }
        
        /// <remarks/>
        public string eledgerParent {
            get {
                return this.eledgerParentField;
            }
            set {
                this.eledgerParentField = value;
            }
        }
        
        /// <remarks/>
        public string mailDayDirectory {
            get {
                return this.mailDayDirectoryField;
            }
            set {
                this.mailDayDirectoryField = value;
            }
        }
        
        /// <remarks/>
        public OutSiderMailMessageAttach[] LogFileAttachs {
            get {
                return this.logFileAttachsField;
            }
            set {
                this.logFileAttachsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class InvoiceInfoList {
        
        private string branchNoField;
        
        private string branchNameField;
        
        private InvoiceOption[] optionsField;
        
        private string uUIDField;
        
        /// <remarks/>
        public string BranchNo {
            get {
                return this.branchNoField;
            }
            set {
                this.branchNoField = value;
            }
        }
        
        /// <remarks/>
        public string BranchName {
            get {
                return this.branchNameField;
            }
            set {
                this.branchNameField = value;
            }
        }
        
        /// <remarks/>
        public InvoiceOption[] Options {
            get {
                return this.optionsField;
            }
            set {
                this.optionsField = value;
            }
        }
        
        /// <remarks/>
        public string UUID {
            get {
                return this.uUIDField;
            }
            set {
                this.uUIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class InvoiceOption {
        
        private int indexField;
        
        private string keyField;
        
        private string valueField;
        
        /// <remarks/>
        public int index {
            get {
                return this.indexField;
            }
            set {
                this.indexField = value;
            }
        }
        
        /// <remarks/>
        public string Key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
        
        /// <remarks/>
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class InvoicesInfoResult {
        
        private Result serviceResultField;
        
        private string serviceResultDescriptionField;
        
        private InvoiceInfoList[] invoicesField;
        
        /// <remarks/>
        public Result ServiceResult {
            get {
                return this.serviceResultField;
            }
            set {
                this.serviceResultField = value;
            }
        }
        
        /// <remarks/>
        public string ServiceResultDescription {
            get {
                return this.serviceResultDescriptionField;
            }
            set {
                this.serviceResultDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public InvoiceInfoList[] Invoices {
            get {
                return this.invoicesField;
            }
            set {
                this.invoicesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class InvoiceInfoQuery {
        
        private string uUIDField;
        
        /// <remarks/>
        public string UUID {
            get {
                return this.uUIDField;
            }
            set {
                this.uUIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class GTBRefAndRegNoResult {
        
        private Result serviceResultField;
        
        private string serviceResultDescriptionField;
        
        private string uUIDField;
        
        private string invoiceIdField;
        
        private string responseCodeField;
        
        private string responseDescriptionField;
        
        private string referenceNumberField;
        
        private string registrationNumberField;
        
        private System.DateTime exportDateField;
        
        /// <remarks/>
        public Result ServiceResult {
            get {
                return this.serviceResultField;
            }
            set {
                this.serviceResultField = value;
            }
        }
        
        /// <remarks/>
        public string ServiceResultDescription {
            get {
                return this.serviceResultDescriptionField;
            }
            set {
                this.serviceResultDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public string UUID {
            get {
                return this.uUIDField;
            }
            set {
                this.uUIDField = value;
            }
        }
        
        /// <remarks/>
        public string InvoiceId {
            get {
                return this.invoiceIdField;
            }
            set {
                this.invoiceIdField = value;
            }
        }
        
        /// <remarks/>
        public string ResponseCode {
            get {
                return this.responseCodeField;
            }
            set {
                this.responseCodeField = value;
            }
        }
        
        /// <remarks/>
        public string ResponseDescription {
            get {
                return this.responseDescriptionField;
            }
            set {
                this.responseDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public string ReferenceNumber {
            get {
                return this.referenceNumberField;
            }
            set {
                this.referenceNumberField = value;
            }
        }
        
        /// <remarks/>
        public string RegistrationNumber {
            get {
                return this.registrationNumberField;
            }
            set {
                this.registrationNumberField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ExportDate {
            get {
                return this.exportDateField;
            }
            set {
                this.exportDateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class eArchiveReconciliationPackResult {
        
        private Result serviceResultField;
        
        private string serviceResultDescriptionField;
        
        private int errorCodeField;
        
        private eArchiveReconciliationInvoices[] eArchiveInvoicesField;
        
        /// <remarks/>
        public Result ServiceResult {
            get {
                return this.serviceResultField;
            }
            set {
                this.serviceResultField = value;
            }
        }
        
        /// <remarks/>
        public string ServiceResultDescription {
            get {
                return this.serviceResultDescriptionField;
            }
            set {
                this.serviceResultDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public int ErrorCode {
            get {
                return this.errorCodeField;
            }
            set {
                this.errorCodeField = value;
            }
        }
        
        /// <remarks/>
        public eArchiveReconciliationInvoices[] eArchiveInvoices {
            get {
                return this.eArchiveInvoicesField;
            }
            set {
                this.eArchiveInvoicesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class eArchiveReconciliationInvoices {
        
        private Result serviceResultField;
        
        private string serviceResultDescriptionField;
        
        private int errorCodeField;
        
        private bool hasInvoiceField;
        
        private string uUIDField;
        
        private string invoiceIdField;
        
        private string additionalInformationField;
        
        /// <remarks/>
        public Result ServiceResult {
            get {
                return this.serviceResultField;
            }
            set {
                this.serviceResultField = value;
            }
        }
        
        /// <remarks/>
        public string ServiceResultDescription {
            get {
                return this.serviceResultDescriptionField;
            }
            set {
                this.serviceResultDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public int ErrorCode {
            get {
                return this.errorCodeField;
            }
            set {
                this.errorCodeField = value;
            }
        }
        
        /// <remarks/>
        public bool HasInvoice {
            get {
                return this.hasInvoiceField;
            }
            set {
                this.hasInvoiceField = value;
            }
        }
        
        /// <remarks/>
        public string UUID {
            get {
                return this.uUIDField;
            }
            set {
                this.uUIDField = value;
            }
        }
        
        /// <remarks/>
        public string InvoiceId {
            get {
                return this.invoiceIdField;
            }
            set {
                this.invoiceIdField = value;
            }
        }
        
        /// <remarks/>
        public string AdditionalInformation {
            get {
                return this.additionalInformationField;
            }
            set {
                this.additionalInformationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class InvoiceIdResult {
        
        private Result serviceResultField;
        
        private string serviceResultDescriptionField;
        
        private int errorCodeField;
        
        private string invoiceIdField;
        
        private string uUIDField;
        
        /// <remarks/>
        public Result ServiceResult {
            get {
                return this.serviceResultField;
            }
            set {
                this.serviceResultField = value;
            }
        }
        
        /// <remarks/>
        public string ServiceResultDescription {
            get {
                return this.serviceResultDescriptionField;
            }
            set {
                this.serviceResultDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public int ErrorCode {
            get {
                return this.errorCodeField;
            }
            set {
                this.errorCodeField = value;
            }
        }
        
        /// <remarks/>
        public string InvoiceId {
            get {
                return this.invoiceIdField;
            }
            set {
                this.invoiceIdField = value;
            }
        }
        
        /// <remarks/>
        public string UUID {
            get {
                return this.uUIDField;
            }
            set {
                this.uUIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class SendEMailResult {
        
        private Result serviceResultField;
        
        private string serviceResultDescriptionField;
        
        private int errorCodeField;
        
        private string uUIDField;
        
        private Direction directionField;
        
        private string senderField;
        
        private string receiverField;
        
        private byte[] pdfAsBinaryField;
        
        /// <remarks/>
        public Result ServiceResult {
            get {
                return this.serviceResultField;
            }
            set {
                this.serviceResultField = value;
            }
        }
        
        /// <remarks/>
        public string ServiceResultDescription {
            get {
                return this.serviceResultDescriptionField;
            }
            set {
                this.serviceResultDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public int ErrorCode {
            get {
                return this.errorCodeField;
            }
            set {
                this.errorCodeField = value;
            }
        }
        
        /// <remarks/>
        public string UUID {
            get {
                return this.uUIDField;
            }
            set {
                this.uUIDField = value;
            }
        }
        
        /// <remarks/>
        public Direction Direction {
            get {
                return this.directionField;
            }
            set {
                this.directionField = value;
            }
        }
        
        /// <remarks/>
        public string Sender {
            get {
                return this.senderField;
            }
            set {
                this.senderField = value;
            }
        }
        
        /// <remarks/>
        public string Receiver {
            get {
                return this.receiverField;
            }
            set {
                this.receiverField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] PdfAsBinary {
            get {
                return this.pdfAsBinaryField;
            }
            set {
                this.pdfAsBinaryField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum Direction {
        
        /// <remarks/>
        Incoming,
        
        /// <remarks/>
        Outgoing,
        
        /// <remarks/>
        AllDirection,
        
        /// <remarks/>
        EArchive,
        
        /// <remarks/>
        EDefter,
        
        /// <remarks/>
        ETicket,
        
        /// <remarks/>
        Despatch,
        
        /// <remarks/>
        ReceiptAdvice,
        
        /// <remarks/>
        DespatchOutgoingForMailSender,
        
        /// <remarks/>
        DespatchIncomingForMailSender,
        
        /// <remarks/>
        ReceiptAdviceOutgoingForMailSender,
        
        /// <remarks/>
        ReceiptAdviceIncomingForMailSender,
        
        /// <remarks/>
        Receipt,
        
        /// <remarks/>
        ReceiptReport,
        
        /// <remarks/>
        SeVoucher,
        
        /// <remarks/>
        SeVoucherReport,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class GetHashOfInvoiceResult {
        
        private Result serviceResultField;
        
        private string serviceResultDescriptionField;
        
        private int errorCodeField;
        
        private string uUIDField;
        
        private string hashCodeField;
        
        private Direction invoiceDirectionField;
        
        /// <remarks/>
        public Result ServiceResult {
            get {
                return this.serviceResultField;
            }
            set {
                this.serviceResultField = value;
            }
        }
        
        /// <remarks/>
        public string ServiceResultDescription {
            get {
                return this.serviceResultDescriptionField;
            }
            set {
                this.serviceResultDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public int ErrorCode {
            get {
                return this.errorCodeField;
            }
            set {
                this.errorCodeField = value;
            }
        }
        
        /// <remarks/>
        public string UUID {
            get {
                return this.uUIDField;
            }
            set {
                this.uUIDField = value;
            }
        }
        
        /// <remarks/>
        public string HashCode {
            get {
                return this.hashCodeField;
            }
            set {
                this.hashCodeField = value;
            }
        }
        
        /// <remarks/>
        public Direction InvoiceDirection {
            get {
                return this.invoiceDirectionField;
            }
            set {
                this.invoiceDirectionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class InvoiceIDRecordResult {
        
        private string invoiceIdField;
        
        private string senderTaxIdField;
        
        private string resultField;
        
        /// <remarks/>
        public string InvoiceId {
            get {
                return this.invoiceIdField;
            }
            set {
                this.invoiceIdField = value;
            }
        }
        
        /// <remarks/>
        public string SenderTaxId {
            get {
                return this.senderTaxIdField;
            }
            set {
                this.senderTaxIdField = value;
            }
        }
        
        /// <remarks/>
        public string Result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class DBJobProcessResult {
        
        private Direction directionField;
        
        private int receivedRecordCountField;
        
        private int processedCountField;
        
        private string jobNameField;
        
        private Result serviceResultField;
        
        private string serviceResultDescriptionField;
        
        private int errorCodeField;
        
        private InvoiceIDRecordResult[] resultListField;
        
        /// <remarks/>
        public Direction Direction {
            get {
                return this.directionField;
            }
            set {
                this.directionField = value;
            }
        }
        
        /// <remarks/>
        public int ReceivedRecordCount {
            get {
                return this.receivedRecordCountField;
            }
            set {
                this.receivedRecordCountField = value;
            }
        }
        
        /// <remarks/>
        public int ProcessedCount {
            get {
                return this.processedCountField;
            }
            set {
                this.processedCountField = value;
            }
        }
        
        /// <remarks/>
        public string JobName {
            get {
                return this.jobNameField;
            }
            set {
                this.jobNameField = value;
            }
        }
        
        /// <remarks/>
        public Result ServiceResult {
            get {
                return this.serviceResultField;
            }
            set {
                this.serviceResultField = value;
            }
        }
        
        /// <remarks/>
        public string ServiceResultDescription {
            get {
                return this.serviceResultDescriptionField;
            }
            set {
                this.serviceResultDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public int ErrorCode {
            get {
                return this.errorCodeField;
            }
            set {
                this.errorCodeField = value;
            }
        }
        
        /// <remarks/>
        public InvoiceIDRecordResult[] ResultList {
            get {
                return this.resultListField;
            }
            set {
                this.resultListField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class ServerStatusResult {
        
        private Result serviceResultField;
        
        private string errorCodeField;
        
        /// <remarks/>
        public Result ServiceResult {
            get {
                return this.serviceResultField;
            }
            set {
                this.serviceResultField = value;
            }
        }
        
        /// <remarks/>
        public string ErrorCode {
            get {
                return this.errorCodeField;
            }
            set {
                this.errorCodeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class CustomerInfoResult {
        
        private Result serviceResultField;
        
        private string serviceResultDescriptionField;
        
        private int errorCodeField;
        
        private string xmlDataField;
        
        /// <remarks/>
        public Result ServiceResult {
            get {
                return this.serviceResultField;
            }
            set {
                this.serviceResultField = value;
            }
        }
        
        /// <remarks/>
        public string ServiceResultDescription {
            get {
                return this.serviceResultDescriptionField;
            }
            set {
                this.serviceResultDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public int ErrorCode {
            get {
                return this.errorCodeField;
            }
            set {
                this.errorCodeField = value;
            }
        }
        
        /// <remarks/>
        public string xmlData {
            get {
                return this.xmlDataField;
            }
            set {
                this.xmlDataField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class InvoiceCountWithDate {
        
        private int countField;
        
        private string statusField;
        
        /// <remarks/>
        public int count {
            get {
                return this.countField;
            }
            set {
                this.countField = value;
            }
        }
        
        /// <remarks/>
        public string status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class InvoiceCountResultWithDate {
        
        private InvoiceCountWithDate[] outgoingInvoiceCountSummaryField;
        
        private InvoiceCountWithDate[] incomingInvoiceCountSummaryField;
        
        private InvoiceCountWithDate[] draftInvoiceCountSummaryField;
        
        private InvoiceCountWithDate[] earchiveInvoiceCountSummaryField;
        
        private Result serviceResultField;
        
        private string serviceResultDescriptionField;
        
        private int errorCodeField;
        
        private int outgoingInvoiceCountField;
        
        private int incomingInvoiceCountField;
        
        private int draftInvoiceCountField;
        
        private int earchiveInvoiceCountField;
        
        /// <remarks/>
        public InvoiceCountWithDate[] OutgoingInvoiceCountSummary {
            get {
                return this.outgoingInvoiceCountSummaryField;
            }
            set {
                this.outgoingInvoiceCountSummaryField = value;
            }
        }
        
        /// <remarks/>
        public InvoiceCountWithDate[] IncomingInvoiceCountSummary {
            get {
                return this.incomingInvoiceCountSummaryField;
            }
            set {
                this.incomingInvoiceCountSummaryField = value;
            }
        }
        
        /// <remarks/>
        public InvoiceCountWithDate[] DraftInvoiceCountSummary {
            get {
                return this.draftInvoiceCountSummaryField;
            }
            set {
                this.draftInvoiceCountSummaryField = value;
            }
        }
        
        /// <remarks/>
        public InvoiceCountWithDate[] EarchiveInvoiceCountSummary {
            get {
                return this.earchiveInvoiceCountSummaryField;
            }
            set {
                this.earchiveInvoiceCountSummaryField = value;
            }
        }
        
        /// <remarks/>
        public Result ServiceResult {
            get {
                return this.serviceResultField;
            }
            set {
                this.serviceResultField = value;
            }
        }
        
        /// <remarks/>
        public string ServiceResultDescription {
            get {
                return this.serviceResultDescriptionField;
            }
            set {
                this.serviceResultDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public int ErrorCode {
            get {
                return this.errorCodeField;
            }
            set {
                this.errorCodeField = value;
            }
        }
        
        /// <remarks/>
        public int OutgoingInvoiceCount {
            get {
                return this.outgoingInvoiceCountField;
            }
            set {
                this.outgoingInvoiceCountField = value;
            }
        }
        
        /// <remarks/>
        public int IncomingInvoiceCount {
            get {
                return this.incomingInvoiceCountField;
            }
            set {
                this.incomingInvoiceCountField = value;
            }
        }
        
        /// <remarks/>
        public int DraftInvoiceCount {
            get {
                return this.draftInvoiceCountField;
            }
            set {
                this.draftInvoiceCountField = value;
            }
        }
        
        /// <remarks/>
        public int EarchiveInvoiceCount {
            get {
                return this.earchiveInvoiceCountField;
            }
            set {
                this.earchiveInvoiceCountField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class InvoiceSummary {
        
        private string statusField;
        
        private int countField;
        
        /// <remarks/>
        public string status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public int count {
            get {
                return this.countField;
            }
            set {
                this.countField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class InvoiceSummaryResult {
        
        private InvoiceSummary[] outgoingInvoiceSummaryField;
        
        private InvoiceSummary[] incomingInvoiceSummaryField;
        
        private Result serviceResultField;
        
        private string serviceResultDescriptionField;
        
        private int errorCodeField;
        
        private int outgoingInvoiceCountField;
        
        private int incomingInvoiceCountField;
        
        /// <remarks/>
        public InvoiceSummary[] OutgoingInvoiceSummary {
            get {
                return this.outgoingInvoiceSummaryField;
            }
            set {
                this.outgoingInvoiceSummaryField = value;
            }
        }
        
        /// <remarks/>
        public InvoiceSummary[] IncomingInvoiceSummary {
            get {
                return this.incomingInvoiceSummaryField;
            }
            set {
                this.incomingInvoiceSummaryField = value;
            }
        }
        
        /// <remarks/>
        public Result ServiceResult {
            get {
                return this.serviceResultField;
            }
            set {
                this.serviceResultField = value;
            }
        }
        
        /// <remarks/>
        public string ServiceResultDescription {
            get {
                return this.serviceResultDescriptionField;
            }
            set {
                this.serviceResultDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public int ErrorCode {
            get {
                return this.errorCodeField;
            }
            set {
                this.errorCodeField = value;
            }
        }
        
        /// <remarks/>
        public int OutgoingInvoiceCount {
            get {
                return this.outgoingInvoiceCountField;
            }
            set {
                this.outgoingInvoiceCountField = value;
            }
        }
        
        /// <remarks/>
        public int IncomingInvoiceCount {
            get {
                return this.incomingInvoiceCountField;
            }
            set {
                this.incomingInvoiceCountField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class EInvoiceCustomerFullListResult {
        
        private Result serviceResultField;
        
        private string serviceResultDescriptionField;
        
        private int errorCodeField;
        
        private byte[] compressedFileField;
        
        /// <remarks/>
        public Result ServiceResult {
            get {
                return this.serviceResultField;
            }
            set {
                this.serviceResultField = value;
            }
        }
        
        /// <remarks/>
        public string ServiceResultDescription {
            get {
                return this.serviceResultDescriptionField;
            }
            set {
                this.serviceResultDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public int ErrorCode {
            get {
                return this.errorCodeField;
            }
            set {
                this.errorCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] CompressedFile {
            get {
                return this.compressedFileField;
            }
            set {
                this.compressedFileField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class EInvoiceCustomerListResult {
        
        private Result serviceResultField;
        
        private string serviceResultDescriptionField;
        
        private int errorCodeField;
        
        private EInvoiceCustomerResult[] customerInfoListField;
        
        private byte[] cSVFileField;
        
        /// <remarks/>
        public Result ServiceResult {
            get {
                return this.serviceResultField;
            }
            set {
                this.serviceResultField = value;
            }
        }
        
        /// <remarks/>
        public string ServiceResultDescription {
            get {
                return this.serviceResultDescriptionField;
            }
            set {
                this.serviceResultDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public int ErrorCode {
            get {
                return this.errorCodeField;
            }
            set {
                this.errorCodeField = value;
            }
        }
        
        /// <remarks/>
        public EInvoiceCustomerResult[] CustomerInfoList {
            get {
                return this.customerInfoListField;
            }
            set {
                this.customerInfoListField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] CSVFile {
            get {
                return this.cSVFileField;
            }
            set {
                this.cSVFileField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class EInvoiceCustomerResult {
        
        private string taxIdOrPersonalIdField;
        
        private string aliasField;
        
        private string typeField;
        
        private string nameField;
        
        private System.DateTime registerTimeField;
        
        private bool isExistField;
        
        private System.DateTime aliasCreateDateField;
        
        private System.DateTime firstCreationTimeField;
        
        /// <remarks/>
        public string TaxIdOrPersonalId {
            get {
                return this.taxIdOrPersonalIdField;
            }
            set {
                this.taxIdOrPersonalIdField = value;
            }
        }
        
        /// <remarks/>
        public string Alias {
            get {
                return this.aliasField;
            }
            set {
                this.aliasField = value;
            }
        }
        
        /// <remarks/>
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime RegisterTime {
            get {
                return this.registerTimeField;
            }
            set {
                this.registerTimeField = value;
            }
        }
        
        /// <remarks/>
        public bool IsExist {
            get {
                return this.isExistField;
            }
            set {
                this.isExistField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime AliasCreateDate {
            get {
                return this.aliasCreateDateField;
            }
            set {
                this.aliasCreateDateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime FirstCreationTime {
            get {
                return this.firstCreationTimeField;
            }
            set {
                this.firstCreationTimeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class CorporateTemplateResult {
        
        private Result serviceResultField;
        
        private string serviceResultDescriptionField;
        
        private int errorCodeField;
        
        private string templateCodeField;
        
        private string invoiceTypeField;
        
        private string templatePrefixField;
        
        private byte[] templateField;
        
        /// <remarks/>
        public Result ServiceResult {
            get {
                return this.serviceResultField;
            }
            set {
                this.serviceResultField = value;
            }
        }
        
        /// <remarks/>
        public string ServiceResultDescription {
            get {
                return this.serviceResultDescriptionField;
            }
            set {
                this.serviceResultDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public int ErrorCode {
            get {
                return this.errorCodeField;
            }
            set {
                this.errorCodeField = value;
            }
        }
        
        /// <remarks/>
        public string TemplateCode {
            get {
                return this.templateCodeField;
            }
            set {
                this.templateCodeField = value;
            }
        }
        
        /// <remarks/>
        public string InvoiceType {
            get {
                return this.invoiceTypeField;
            }
            set {
                this.invoiceTypeField = value;
            }
        }
        
        /// <remarks/>
        public string TemplatePrefix {
            get {
                return this.templatePrefixField;
            }
            set {
                this.templatePrefixField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] Template {
            get {
                return this.templateField;
            }
            set {
                this.templateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class EArchiveReportPackResult {
        
        private Result serviceResultField;
        
        private string serviceResultDescriptionField;
        
        private int errorCodeField;
        
        private EArchiveReportResult[] reportsField;
        
        /// <remarks/>
        public Result ServiceResult {
            get {
                return this.serviceResultField;
            }
            set {
                this.serviceResultField = value;
            }
        }
        
        /// <remarks/>
        public string ServiceResultDescription {
            get {
                return this.serviceResultDescriptionField;
            }
            set {
                this.serviceResultDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public int ErrorCode {
            get {
                return this.errorCodeField;
            }
            set {
                this.errorCodeField = value;
            }
        }
        
        /// <remarks/>
        public EArchiveReportResult[] Reports {
            get {
                return this.reportsField;
            }
            set {
                this.reportsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class EArchiveReportResult {
        
        private Result serviceResultField;
        
        private string serviceResultDescriptionField;
        
        private int errorCodeField;
        
        private string statusDescriptionField;
        
        private int statusCodeField;
        
        private string reportNoField;
        
        private System.DateTime startPeriodField;
        
        private System.DateTime endPeriodField;
        
        private System.DateTime startPartField;
        
        private System.DateTime endPartField;
        
        private int partNoField;
        
        private int invoiceCountField;
        
        private byte[] reportDataField;
        
        /// <remarks/>
        public Result ServiceResult {
            get {
                return this.serviceResultField;
            }
            set {
                this.serviceResultField = value;
            }
        }
        
        /// <remarks/>
        public string ServiceResultDescription {
            get {
                return this.serviceResultDescriptionField;
            }
            set {
                this.serviceResultDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public int ErrorCode {
            get {
                return this.errorCodeField;
            }
            set {
                this.errorCodeField = value;
            }
        }
        
        /// <remarks/>
        public string StatusDescription {
            get {
                return this.statusDescriptionField;
            }
            set {
                this.statusDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public int StatusCode {
            get {
                return this.statusCodeField;
            }
            set {
                this.statusCodeField = value;
            }
        }
        
        /// <remarks/>
        public string ReportNo {
            get {
                return this.reportNoField;
            }
            set {
                this.reportNoField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime StartPeriod {
            get {
                return this.startPeriodField;
            }
            set {
                this.startPeriodField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime EndPeriod {
            get {
                return this.endPeriodField;
            }
            set {
                this.endPeriodField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime StartPart {
            get {
                return this.startPartField;
            }
            set {
                this.startPartField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime EndPart {
            get {
                return this.endPartField;
            }
            set {
                this.endPartField = value;
            }
        }
        
        /// <remarks/>
        public int PartNo {
            get {
                return this.partNoField;
            }
            set {
                this.partNoField = value;
            }
        }
        
        /// <remarks/>
        public int InvoiceCount {
            get {
                return this.invoiceCountField;
            }
            set {
                this.invoiceCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] ReportData {
            get {
                return this.reportDataField;
            }
            set {
                this.reportDataField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class EnvelopeDownloadResult {
        
        private InvoiceStateResult[] invoicesField;
        
        private Result serviceResultField;
        
        private byte[] returnValueField;
        
        private string serviceResultDescriptionField;
        
        private string instanceIdentifierField;
        
        private string sourceField;
        
        private int errorCodeField;
        
        /// <remarks/>
        public InvoiceStateResult[] Invoices {
            get {
                return this.invoicesField;
            }
            set {
                this.invoicesField = value;
            }
        }
        
        /// <remarks/>
        public Result ServiceResult {
            get {
                return this.serviceResultField;
            }
            set {
                this.serviceResultField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] ReturnValue {
            get {
                return this.returnValueField;
            }
            set {
                this.returnValueField = value;
            }
        }
        
        /// <remarks/>
        public string ServiceResultDescription {
            get {
                return this.serviceResultDescriptionField;
            }
            set {
                this.serviceResultDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public string InstanceIdentifier {
            get {
                return this.instanceIdentifierField;
            }
            set {
                this.instanceIdentifierField = value;
            }
        }
        
        /// <remarks/>
        public string Source {
            get {
                return this.sourceField;
            }
            set {
                this.sourceField = value;
            }
        }
        
        /// <remarks/>
        public int ErrorCode {
            get {
                return this.errorCodeField;
            }
            set {
                this.errorCodeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class InvoiceStateResult {
        
        private Result serviceResultField;
        
        private string serviceResultDescriptionField;
        
        private string uUIDField;
        
        private string invoiceIdField;
        
        private string statusDescriptionField;
        
        private int statusCodeField;
        
        private int errorCodeField;
        
        private string referenceNoField;
        
        /// <remarks/>
        public Result ServiceResult {
            get {
                return this.serviceResultField;
            }
            set {
                this.serviceResultField = value;
            }
        }
        
        /// <remarks/>
        public string ServiceResultDescription {
            get {
                return this.serviceResultDescriptionField;
            }
            set {
                this.serviceResultDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public string UUID {
            get {
                return this.uUIDField;
            }
            set {
                this.uUIDField = value;
            }
        }
        
        /// <remarks/>
        public string InvoiceId {
            get {
                return this.invoiceIdField;
            }
            set {
                this.invoiceIdField = value;
            }
        }
        
        /// <remarks/>
        public string StatusDescription {
            get {
                return this.statusDescriptionField;
            }
            set {
                this.statusDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public int StatusCode {
            get {
                return this.statusCodeField;
            }
            set {
                this.statusCodeField = value;
            }
        }
        
        /// <remarks/>
        public int ErrorCode {
            get {
                return this.errorCodeField;
            }
            set {
                this.errorCodeField = value;
            }
        }
        
        /// <remarks/>
        public string ReferenceNo {
            get {
                return this.referenceNoField;
            }
            set {
                this.referenceNoField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class EArchiveReportStateResult {
        
        private Result serviceResultField;
        
        private string serviceResultDescriptionField;
        
        private string reportNoField;
        
        private string reportStatusDescriptionField;
        
        private int reportStatusCodeField;
        
        private int errorCodeField;
        
        /// <remarks/>
        public Result ServiceResult {
            get {
                return this.serviceResultField;
            }
            set {
                this.serviceResultField = value;
            }
        }
        
        /// <remarks/>
        public string ServiceResultDescription {
            get {
                return this.serviceResultDescriptionField;
            }
            set {
                this.serviceResultDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public string ReportNo {
            get {
                return this.reportNoField;
            }
            set {
                this.reportNoField = value;
            }
        }
        
        /// <remarks/>
        public string ReportStatusDescription {
            get {
                return this.reportStatusDescriptionField;
            }
            set {
                this.reportStatusDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public int ReportStatusCode {
            get {
                return this.reportStatusCodeField;
            }
            set {
                this.reportStatusCodeField = value;
            }
        }
        
        /// <remarks/>
        public int ErrorCode {
            get {
                return this.errorCodeField;
            }
            set {
                this.errorCodeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class EArchiveInvoiceStateResult {
        
        private Result serviceResultField;
        
        private string serviceResultDescriptionField;
        
        private string uUIDField;
        
        private string invoiceIdField;
        
        private string invoiceStatusDescriptionField;
        
        private int invoiceStatusCodeField;
        
        private bool hasCancelInvoiceField;
        
        private int cancelStatusCodeField;
        
        private string cancelStatusDescriptionField;
        
        private System.DateTime cancelDateField;
        
        private int errorCodeField;
        
        /// <remarks/>
        public Result ServiceResult {
            get {
                return this.serviceResultField;
            }
            set {
                this.serviceResultField = value;
            }
        }
        
        /// <remarks/>
        public string ServiceResultDescription {
            get {
                return this.serviceResultDescriptionField;
            }
            set {
                this.serviceResultDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public string UUID {
            get {
                return this.uUIDField;
            }
            set {
                this.uUIDField = value;
            }
        }
        
        /// <remarks/>
        public string InvoiceId {
            get {
                return this.invoiceIdField;
            }
            set {
                this.invoiceIdField = value;
            }
        }
        
        /// <remarks/>
        public string InvoiceStatusDescription {
            get {
                return this.invoiceStatusDescriptionField;
            }
            set {
                this.invoiceStatusDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public int InvoiceStatusCode {
            get {
                return this.invoiceStatusCodeField;
            }
            set {
                this.invoiceStatusCodeField = value;
            }
        }
        
        /// <remarks/>
        public bool HasCancelInvoice {
            get {
                return this.hasCancelInvoiceField;
            }
            set {
                this.hasCancelInvoiceField = value;
            }
        }
        
        /// <remarks/>
        public int CancelStatusCode {
            get {
                return this.cancelStatusCodeField;
            }
            set {
                this.cancelStatusCodeField = value;
            }
        }
        
        /// <remarks/>
        public string CancelStatusDescription {
            get {
                return this.cancelStatusDescriptionField;
            }
            set {
                this.cancelStatusDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime CancelDate {
            get {
                return this.cancelDateField;
            }
            set {
                this.cancelDateField = value;
            }
        }
        
        /// <remarks/>
        public int ErrorCode {
            get {
                return this.errorCodeField;
            }
            set {
                this.errorCodeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class InvoicePackResult {
        
        private Result serviceResultField;
        
        private string serviceResultDescriptionField;
        
        private int errorCodeField;
        
        private InvoiceInfoResult[] invoicesField;
        
        /// <remarks/>
        public Result ServiceResult {
            get {
                return this.serviceResultField;
            }
            set {
                this.serviceResultField = value;
            }
        }
        
        /// <remarks/>
        public string ServiceResultDescription {
            get {
                return this.serviceResultDescriptionField;
            }
            set {
                this.serviceResultDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public int ErrorCode {
            get {
                return this.errorCodeField;
            }
            set {
                this.errorCodeField = value;
            }
        }
        
        /// <remarks/>
        public InvoiceInfoResult[] Invoices {
            get {
                return this.invoicesField;
            }
            set {
                this.invoicesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class InvoiceInfoResult {
        
        private InvoiceOption[] optionsField;
        
        private Result serviceResultField;
        
        private string serviceResultDescriptionField;
        
        private string uUIDField;
        
        private string invoiceIdField;
        
        private byte[] returnValueField;
        
        private string statusDescriptionField;
        
        private int statusCodeField;
        
        private int errorCodeField;
        
        private string invoicetypecodeField;
        
        private string sendertaxidField;
        
        private string receivertaxidField;
        
        private string profileidField;
        
        private string payableamountField;
        
        private System.DateTime issuedateField;
        
        private System.DateTime issuetimeField;
        
        private string partynameField;
        
        private string receiverPostBoxNameField;
        
        private string senderPostBoxNameField;
        
        private string documentCurrencyField;
        
        private decimal allowanceTotalAmountField;
        
        private decimal chargeTotalAmountField;
        
        private decimal taxTotalAmountField;
        
        private System.Nullable<System.DateTime> paymentDueDateField;
        
        private string orderReferenceNoField;
        
        private int sendingTypeField;
        
        private int paymentMeansField;
        
        private string referenceNoField;
        
        private System.Nullable<System.DateTime> createdateField;
        
        private Direction directionField;
        
        private string branchNoField;
        
        private string branchNameField;
        
        /// <remarks/>
        public InvoiceOption[] Options {
            get {
                return this.optionsField;
            }
            set {
                this.optionsField = value;
            }
        }
        
        /// <remarks/>
        public Result ServiceResult {
            get {
                return this.serviceResultField;
            }
            set {
                this.serviceResultField = value;
            }
        }
        
        /// <remarks/>
        public string ServiceResultDescription {
            get {
                return this.serviceResultDescriptionField;
            }
            set {
                this.serviceResultDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public string UUID {
            get {
                return this.uUIDField;
            }
            set {
                this.uUIDField = value;
            }
        }
        
        /// <remarks/>
        public string InvoiceId {
            get {
                return this.invoiceIdField;
            }
            set {
                this.invoiceIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] ReturnValue {
            get {
                return this.returnValueField;
            }
            set {
                this.returnValueField = value;
            }
        }
        
        /// <remarks/>
        public string StatusDescription {
            get {
                return this.statusDescriptionField;
            }
            set {
                this.statusDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public int StatusCode {
            get {
                return this.statusCodeField;
            }
            set {
                this.statusCodeField = value;
            }
        }
        
        /// <remarks/>
        public int ErrorCode {
            get {
                return this.errorCodeField;
            }
            set {
                this.errorCodeField = value;
            }
        }
        
        /// <remarks/>
        public string Invoicetypecode {
            get {
                return this.invoicetypecodeField;
            }
            set {
                this.invoicetypecodeField = value;
            }
        }
        
        /// <remarks/>
        public string Sendertaxid {
            get {
                return this.sendertaxidField;
            }
            set {
                this.sendertaxidField = value;
            }
        }
        
        /// <remarks/>
        public string Receivertaxid {
            get {
                return this.receivertaxidField;
            }
            set {
                this.receivertaxidField = value;
            }
        }
        
        /// <remarks/>
        public string Profileid {
            get {
                return this.profileidField;
            }
            set {
                this.profileidField = value;
            }
        }
        
        /// <remarks/>
        public string Payableamount {
            get {
                return this.payableamountField;
            }
            set {
                this.payableamountField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Issuedate {
            get {
                return this.issuedateField;
            }
            set {
                this.issuedateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Issuetime {
            get {
                return this.issuetimeField;
            }
            set {
                this.issuetimeField = value;
            }
        }
        
        /// <remarks/>
        public string Partyname {
            get {
                return this.partynameField;
            }
            set {
                this.partynameField = value;
            }
        }
        
        /// <remarks/>
        public string ReceiverPostBoxName {
            get {
                return this.receiverPostBoxNameField;
            }
            set {
                this.receiverPostBoxNameField = value;
            }
        }
        
        /// <remarks/>
        public string SenderPostBoxName {
            get {
                return this.senderPostBoxNameField;
            }
            set {
                this.senderPostBoxNameField = value;
            }
        }
        
        /// <remarks/>
        public string DocumentCurrency {
            get {
                return this.documentCurrencyField;
            }
            set {
                this.documentCurrencyField = value;
            }
        }
        
        /// <remarks/>
        public decimal AllowanceTotalAmount {
            get {
                return this.allowanceTotalAmountField;
            }
            set {
                this.allowanceTotalAmountField = value;
            }
        }
        
        /// <remarks/>
        public decimal ChargeTotalAmount {
            get {
                return this.chargeTotalAmountField;
            }
            set {
                this.chargeTotalAmountField = value;
            }
        }
        
        /// <remarks/>
        public decimal TaxTotalAmount {
            get {
                return this.taxTotalAmountField;
            }
            set {
                this.taxTotalAmountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> PaymentDueDate {
            get {
                return this.paymentDueDateField;
            }
            set {
                this.paymentDueDateField = value;
            }
        }
        
        /// <remarks/>
        public string OrderReferenceNo {
            get {
                return this.orderReferenceNoField;
            }
            set {
                this.orderReferenceNoField = value;
            }
        }
        
        /// <remarks/>
        public int SendingType {
            get {
                return this.sendingTypeField;
            }
            set {
                this.sendingTypeField = value;
            }
        }
        
        /// <remarks/>
        public int PaymentMeans {
            get {
                return this.paymentMeansField;
            }
            set {
                this.paymentMeansField = value;
            }
        }
        
        /// <remarks/>
        public string ReferenceNo {
            get {
                return this.referenceNoField;
            }
            set {
                this.referenceNoField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> Createdate {
            get {
                return this.createdateField;
            }
            set {
                this.createdateField = value;
            }
        }
        
        /// <remarks/>
        public Direction Direction {
            get {
                return this.directionField;
            }
            set {
                this.directionField = value;
            }
        }
        
        /// <remarks/>
        public string BranchNo {
            get {
                return this.branchNoField;
            }
            set {
                this.branchNoField = value;
            }
        }
        
        /// <remarks/>
        public string BranchName {
            get {
                return this.branchNameField;
            }
            set {
                this.branchNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class ResponseResult {
        
        private Result serviceResultField;
        
        private string serviceResultDescriptionField;
        
        private bool acceptOrRejectInvoiceField;
        
        private int errorCodeField;
        
        /// <remarks/>
        public Result ServiceResult {
            get {
                return this.serviceResultField;
            }
            set {
                this.serviceResultField = value;
            }
        }
        
        /// <remarks/>
        public string ServiceResultDescription {
            get {
                return this.serviceResultDescriptionField;
            }
            set {
                this.serviceResultDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public bool AcceptOrRejectInvoice {
            get {
                return this.acceptOrRejectInvoiceField;
            }
            set {
                this.acceptOrRejectInvoiceField = value;
            }
        }
        
        /// <remarks/>
        public int ErrorCode {
            get {
                return this.errorCodeField;
            }
            set {
                this.errorCodeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class EInvoiceCustomerListUpdateResult {
        
        private Result serviceResultField;
        
        private string serviceResultDescriptionField;
        
        private int errorCodeField;
        
        private EInvoiceCustomerResult[] deletedListField;
        
        private EInvoiceCustomerResult[] insertedListField;
        
        /// <remarks/>
        public Result ServiceResult {
            get {
                return this.serviceResultField;
            }
            set {
                this.serviceResultField = value;
            }
        }
        
        /// <remarks/>
        public string ServiceResultDescription {
            get {
                return this.serviceResultDescriptionField;
            }
            set {
                this.serviceResultDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public int ErrorCode {
            get {
                return this.errorCodeField;
            }
            set {
                this.errorCodeField = value;
            }
        }
        
        /// <remarks/>
        public EInvoiceCustomerResult[] DeletedList {
            get {
                return this.deletedListField;
            }
            set {
                this.deletedListField = value;
            }
        }
        
        /// <remarks/>
        public EInvoiceCustomerResult[] InsertedList {
            get {
                return this.insertedListField;
            }
            set {
                this.insertedListField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class GibStatusResult {
        
        private Result serviceResultField;
        
        private string serviceResultDescriptionField;
        
        private string lineResponseCodeField;
        
        private string lineResponseDescriptionField;
        
        private string guidField;
        
        private string guidTypeField;
        
        /// <remarks/>
        public Result ServiceResult {
            get {
                return this.serviceResultField;
            }
            set {
                this.serviceResultField = value;
            }
        }
        
        /// <remarks/>
        public string ServiceResultDescription {
            get {
                return this.serviceResultDescriptionField;
            }
            set {
                this.serviceResultDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public string LineResponseCode {
            get {
                return this.lineResponseCodeField;
            }
            set {
                this.lineResponseCodeField = value;
            }
        }
        
        /// <remarks/>
        public string LineResponseDescription {
            get {
                return this.lineResponseDescriptionField;
            }
            set {
                this.lineResponseDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public string Guid {
            get {
                return this.guidField;
            }
            set {
                this.guidField = value;
            }
        }
        
        /// <remarks/>
        public string GuidType {
            get {
                return this.guidTypeField;
            }
            set {
                this.guidTypeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class CancelInvoiceNumberResult {
        
        private Result serviceResultField;
        
        private string serviceResultDescriptionField;
        
        /// <remarks/>
        public Result ServiceResult {
            get {
                return this.serviceResultField;
            }
            set {
                this.serviceResultField = value;
            }
        }
        
        /// <remarks/>
        public string ServiceResultDescription {
            get {
                return this.serviceResultDescriptionField;
            }
            set {
                this.serviceResultDescriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class EArchiveStateResult {
        
        private InvoiceStateResult[] invoicesField;
        
        private Result serviceResultField;
        
        private string serviceResultDescriptionField;
        
        private string instanceIdentifierField;
        
        private string sourceField;
        
        private int errorCodeField;
        
        private int invoiceCountField;
        
        /// <remarks/>
        public InvoiceStateResult[] Invoices {
            get {
                return this.invoicesField;
            }
            set {
                this.invoicesField = value;
            }
        }
        
        /// <remarks/>
        public Result ServiceResult {
            get {
                return this.serviceResultField;
            }
            set {
                this.serviceResultField = value;
            }
        }
        
        /// <remarks/>
        public string ServiceResultDescription {
            get {
                return this.serviceResultDescriptionField;
            }
            set {
                this.serviceResultDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public string InstanceIdentifier {
            get {
                return this.instanceIdentifierField;
            }
            set {
                this.instanceIdentifierField = value;
            }
        }
        
        /// <remarks/>
        public string Source {
            get {
                return this.sourceField;
            }
            set {
                this.sourceField = value;
            }
        }
        
        /// <remarks/>
        public int ErrorCode {
            get {
                return this.errorCodeField;
            }
            set {
                this.errorCodeField = value;
            }
        }
        
        /// <remarks/>
        public int invoiceCount {
            get {
                return this.invoiceCountField;
            }
            set {
                this.invoiceCountField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class EnvelopeStateResult {
        
        private InvoiceStateResult[] invoicesField;
        
        private Result serviceResultField;
        
        private string serviceResultDescriptionField;
        
        private string instanceIdentifierField;
        
        private string sourceField;
        
        private int errorCodeField;
        
        /// <remarks/>
        public InvoiceStateResult[] Invoices {
            get {
                return this.invoicesField;
            }
            set {
                this.invoicesField = value;
            }
        }
        
        /// <remarks/>
        public Result ServiceResult {
            get {
                return this.serviceResultField;
            }
            set {
                this.serviceResultField = value;
            }
        }
        
        /// <remarks/>
        public string ServiceResultDescription {
            get {
                return this.serviceResultDescriptionField;
            }
            set {
                this.serviceResultDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public string InstanceIdentifier {
            get {
                return this.instanceIdentifierField;
            }
            set {
                this.instanceIdentifierField = value;
            }
        }
        
        /// <remarks/>
        public string Source {
            get {
                return this.sourceField;
            }
            set {
                this.sourceField = value;
            }
        }
        
        /// <remarks/>
        public int ErrorCode {
            get {
                return this.errorCodeField;
            }
            set {
                this.errorCodeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class ApplicationResponseResult {
        
        private Result serviceResultField;
        
        private string serviceResultDescriptionField;
        
        private string uUIDField;
        
        private string documentReferenceIdField;
        
        private string invoiceUUIDField;
        
        private int statusCodeField;
        
        private string statusMessageField;
        
        private string statusDescriptionField;
        
        private int errorCodeField;
        
        /// <remarks/>
        public Result ServiceResult {
            get {
                return this.serviceResultField;
            }
            set {
                this.serviceResultField = value;
            }
        }
        
        /// <remarks/>
        public string ServiceResultDescription {
            get {
                return this.serviceResultDescriptionField;
            }
            set {
                this.serviceResultDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public string UUID {
            get {
                return this.uUIDField;
            }
            set {
                this.uUIDField = value;
            }
        }
        
        /// <remarks/>
        public string DocumentReferenceId {
            get {
                return this.documentReferenceIdField;
            }
            set {
                this.documentReferenceIdField = value;
            }
        }
        
        /// <remarks/>
        public string InvoiceUUID {
            get {
                return this.invoiceUUIDField;
            }
            set {
                this.invoiceUUIDField = value;
            }
        }
        
        /// <remarks/>
        public int StatusCode {
            get {
                return this.statusCodeField;
            }
            set {
                this.statusCodeField = value;
            }
        }
        
        /// <remarks/>
        public string StatusMessage {
            get {
                return this.statusMessageField;
            }
            set {
                this.statusMessageField = value;
            }
        }
        
        /// <remarks/>
        public string StatusDescription {
            get {
                return this.statusDescriptionField;
            }
            set {
                this.statusDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public int ErrorCode {
            get {
                return this.errorCodeField;
            }
            set {
                this.errorCodeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum File {
        
        /// <remarks/>
        Text,
        
        /// <remarks/>
        Xml,
        
        /// <remarks/>
        UBL,
        
        /// <remarks/>
        Excel,
        
        /// <remarks/>
        Pdf,
        
        /// <remarks/>
        NewExcel,
        
        /// <remarks/>
        Edi,
        
        /// <remarks/>
        Envelope,
        
        /// <remarks/>
        RenaultUserList,
        
        /// <remarks/>
        RenaultStatus,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum EnvelopeDownloadDocumentType {
        
        /// <remarks/>
        Undefined,
        
        /// <remarks/>
        Envelope,
        
        /// <remarks/>
        OutgoingInvoice,
        
        /// <remarks/>
        IncomingInvoice,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum EArchiveReportStatusListType {
        
        /// <remarks/>
        SucceedReports,
        
        /// <remarks/>
        AllReports,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum UUIDFileType {
        
        /// <remarks/>
        TXT,
        
        /// <remarks/>
        CSV,
        
        /// <remarks/>
        XLS,
        
        /// <remarks/>
        XLSX,
        
        /// <remarks/>
        XML,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum ProductName {
        
        /// <remarks/>
        NONE,
        
        /// <remarks/>
        EFATURA,
        
        /// <remarks/>
        EARSIV,
        
        /// <remarks/>
        EDEFTER,
        
        /// <remarks/>
        EIRSALIYE,
        
        /// <remarks/>
        ORTAK,
        
        /// <remarks/>
        EMUSTAHSIL,
        
        /// <remarks/>
        ESERBESTMESLEK,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetAvailableApplicationResponsesCompletedEventHandler(object sender, GetAvailableApplicationResponsesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvailableApplicationResponsesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvailableApplicationResponsesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ApplicationResponsePackResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ApplicationResponsePackResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SendApplicationResponseCompletedEventHandler(object sender, SendApplicationResponseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendApplicationResponseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendApplicationResponseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ApplicationResponseResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ApplicationResponseResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SendMailQueueAgainResponseCompletedEventHandler(object sender, SendMailQueueAgainResponseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMailQueueAgainResponseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMailQueueAgainResponseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ApplicationResponseResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ApplicationResponseResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SendInvoiceDataCompletedEventHandler(object sender, SendInvoiceDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendInvoiceDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendInvoiceDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EnvelopeStateResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EnvelopeStateResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SendEArchiveDataCompletedEventHandler(object sender, SendEArchiveDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendEArchiveDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendEArchiveDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EArchiveStateResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EArchiveStateResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SendBase64StringEArchiveDataCompletedEventHandler(object sender, SendBase64StringEArchiveDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendBase64StringEArchiveDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendBase64StringEArchiveDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EArchiveStateResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EArchiveStateResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ReSendInvoiceDataCompletedEventHandler(object sender, ReSendInvoiceDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReSendInvoiceDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReSendInvoiceDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EnvelopeStateResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EnvelopeStateResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SendInvoiceDataWithTemplateCodeCompletedEventHandler(object sender, SendInvoiceDataWithTemplateCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendInvoiceDataWithTemplateCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendInvoiceDataWithTemplateCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EnvelopeStateResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EnvelopeStateResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SendEArchiveDataWithTemplateCodeCompletedEventHandler(object sender, SendEArchiveDataWithTemplateCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendEArchiveDataWithTemplateCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendEArchiveDataWithTemplateCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EArchiveStateResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EArchiveStateResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SendBase64StringEArchiveDataWithTemplateCodeCompletedEventHandler(object sender, SendBase64StringEArchiveDataWithTemplateCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendBase64StringEArchiveDataWithTemplateCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendBase64StringEArchiveDataWithTemplateCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EArchiveStateResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EArchiveStateResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CancelEArchiveInvoiceCompletedEventHandler(object sender, CancelEArchiveInvoiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelEArchiveInvoiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelEArchiveInvoiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InvoiceInfoResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InvoiceInfoResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CancelInvoiceNumberCompletedEventHandler(object sender, CancelInvoiceNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelInvoiceNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelInvoiceNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CancelInvoiceNumberResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CancelInvoiceNumberResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CancelEArchiveInvoiceStringDateCompletedEventHandler(object sender, CancelEArchiveInvoiceStringDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelEArchiveInvoiceStringDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelEArchiveInvoiceStringDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InvoiceInfoResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InvoiceInfoResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CancelEArchiveInvoiceStringDateAndAmountCompletedEventHandler(object sender, CancelEArchiveInvoiceStringDateAndAmountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelEArchiveInvoiceStringDateAndAmountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelEArchiveInvoiceStringDateAndAmountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InvoiceInfoResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InvoiceInfoResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SendBase64StringInvoiceCompletedEventHandler(object sender, SendBase64StringInvoiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendBase64StringInvoiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendBase64StringInvoiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EnvelopeStateResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EnvelopeStateResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SendBase64StringInvoiceWithTemplateCodeCompletedEventHandler(object sender, SendBase64StringInvoiceWithTemplateCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendBase64StringInvoiceWithTemplateCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendBase64StringInvoiceWithTemplateCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EnvelopeStateResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EnvelopeStateResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SendXmlInvoiceCompletedEventHandler(object sender, SendXmlInvoiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendXmlInvoiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendXmlInvoiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EnvelopeStateResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EnvelopeStateResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SendUBLInvoiceCompletedEventHandler(object sender, SendUBLInvoiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendUBLInvoiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendUBLInvoiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EnvelopeStateResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EnvelopeStateResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UploadFromArchiveOutgoingCompletedEventHandler(object sender, UploadFromArchiveOutgoingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadFromArchiveOutgoingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadFromArchiveOutgoingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EnvelopeStateResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EnvelopeStateResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UploadFromArchiveUBLOutgoingCompletedEventHandler(object sender, UploadFromArchiveUBLOutgoingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadFromArchiveUBLOutgoingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadFromArchiveUBLOutgoingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EnvelopeStateResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EnvelopeStateResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UploadFromArchiveEnvelopeOutgoingCompletedEventHandler(object sender, UploadFromArchiveEnvelopeOutgoingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadFromArchiveEnvelopeOutgoingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadFromArchiveEnvelopeOutgoingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EnvelopeStateResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EnvelopeStateResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UploadFromArchiveIncomingCompletedEventHandler(object sender, UploadFromArchiveIncomingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadFromArchiveIncomingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadFromArchiveIncomingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EnvelopeStateResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EnvelopeStateResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UploadFromArchiveUBLIncomingCompletedEventHandler(object sender, UploadFromArchiveUBLIncomingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadFromArchiveUBLIncomingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadFromArchiveUBLIncomingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EnvelopeStateResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EnvelopeStateResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UploadFromArchiveEnvelopeIncomingCompletedEventHandler(object sender, UploadFromArchiveEnvelopeIncomingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadFromArchiveEnvelopeIncomingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadFromArchiveEnvelopeIncomingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EnvelopeStateResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EnvelopeStateResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SendCumulativeInvoiceDataCompletedEventHandler(object sender, SendCumulativeInvoiceDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendCumulativeInvoiceDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendCumulativeInvoiceDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EnvelopeStateResult[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EnvelopeStateResult[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CheckGibStatusCompletedEventHandler(object sender, CheckGibStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckGibStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckGibStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public GibStatusResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((GibStatusResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetEInvoiceSenderListUpdatesCompletedEventHandler(object sender, GetEInvoiceSenderListUpdatesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEInvoiceSenderListUpdatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEInvoiceSenderListUpdatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EInvoiceCustomerListUpdateResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EInvoiceCustomerListUpdateResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetEInvoiceReceiverListUpdatesCompletedEventHandler(object sender, GetEInvoiceReceiverListUpdatesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEInvoiceReceiverListUpdatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEInvoiceReceiverListUpdatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EInvoiceCustomerListUpdateResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EInvoiceCustomerListUpdateResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void AcceptInvoiceCompletedEventHandler(object sender, AcceptInvoiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AcceptInvoiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AcceptInvoiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResponseResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResponseResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void RejectInvoiceCompletedEventHandler(object sender, RejectInvoiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RejectInvoiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RejectInvoiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResponseResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResponseResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void RejectInvoiceWithNotifyCompletedEventHandler(object sender, RejectInvoiceWithNotifyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RejectInvoiceWithNotifyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RejectInvoiceWithNotifyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResponseResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResponseResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CheckInvoiceStateCompletedEventHandler(object sender, CheckInvoiceStateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckInvoiceStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckInvoiceStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InvoiceStateResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InvoiceStateResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetAvailableInvoiceReturnStatusCompletedEventHandler(object sender, GetAvailableInvoiceReturnStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvailableInvoiceReturnStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvailableInvoiceReturnStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InvoiceStateResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InvoiceStateResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetInvoiceByInvoiceIDCompletedEventHandler(object sender, GetInvoiceByInvoiceIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInvoiceByInvoiceIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInvoiceByInvoiceIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InvoicePackResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InvoicePackResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetInboundInvoiceByMapCodeCompletedEventHandler(object sender, GetInboundInvoiceByMapCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInboundInvoiceByMapCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInboundInvoiceByMapCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InvoiceInfoResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InvoiceInfoResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CheckEArchiveInvoiceStateCompletedEventHandler(object sender, CheckEArchiveInvoiceStateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckEArchiveInvoiceStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckEArchiveInvoiceStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EArchiveInvoiceStateResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EArchiveInvoiceStateResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CheckEArchiveReportStateCompletedEventHandler(object sender, CheckEArchiveReportStateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckEArchiveReportStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckEArchiveReportStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EArchiveReportStateResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EArchiveReportStateResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void DeleteEArchiveInvoiceCompletedEventHandler(object sender, DeleteEArchiveInvoiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteEArchiveInvoiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteEArchiveInvoiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InvoiceInfoResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InvoiceInfoResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void DeleteEArchiveReportCompletedEventHandler(object sender, DeleteEArchiveReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteEArchiveReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteEArchiveReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EArchiveReportResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EArchiveReportResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CheckInvoiceStateWithReconciliationIDCompletedEventHandler(object sender, CheckInvoiceStateWithReconciliationIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckInvoiceStateWithReconciliationIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckInvoiceStateWithReconciliationIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InvoiceStateResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InvoiceStateResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CheckEnvelopeStateCompletedEventHandler(object sender, CheckEnvelopeStateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckEnvelopeStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckEnvelopeStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EnvelopeStateResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EnvelopeStateResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetEnvelopeCompletedEventHandler(object sender, GetEnvelopeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEnvelopeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEnvelopeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EnvelopeDownloadResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EnvelopeDownloadResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetAvailableInvoicesCompletedEventHandler(object sender, GetAvailableInvoicesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvailableInvoicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvailableInvoicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InvoicePackResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InvoicePackResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetAvailableInvoicesPWCompletedEventHandler(object sender, GetAvailableInvoicesPWCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvailableInvoicesPWCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvailableInvoicesPWCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InvoicePackResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InvoicePackResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetAvailableCompletedInvoicesCompletedEventHandler(object sender, GetAvailableCompletedInvoicesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvailableCompletedInvoicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvailableCompletedInvoicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InvoicePackResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InvoicePackResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetAvailableInvoicesByDateCompletedEventHandler(object sender, GetAvailableInvoicesByDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvailableInvoicesByDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvailableInvoicesByDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InvoicePackResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InvoicePackResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetAvailableInvoicesWithDateCompletedEventHandler(object sender, GetAvailableInvoicesWithDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvailableInvoicesWithDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvailableInvoicesWithDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InvoicePackResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InvoicePackResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetIncomingInvoicesByIssueDateCompletedEventHandler(object sender, GetIncomingInvoicesByIssueDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIncomingInvoicesByIssueDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetIncomingInvoicesByIssueDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InvoicePackResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InvoicePackResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetEArchiveReportListCompletedEventHandler(object sender, GetEArchiveReportListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEArchiveReportListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEArchiveReportListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EArchiveReportPackResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EArchiveReportPackResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetEArchiveReportListWithPeriodCompletedEventHandler(object sender, GetEArchiveReportListWithPeriodCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEArchiveReportListWithPeriodCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEArchiveReportListWithPeriodCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EArchiveReportPackResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EArchiveReportPackResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetInvoiceCompletedEventHandler(object sender, GetInvoiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInvoiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInvoiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InvoiceInfoResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InvoiceInfoResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetInvoicePWCompletedEventHandler(object sender, GetInvoicePWCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInvoicePWCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInvoicePWCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InvoiceInfoResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InvoiceInfoResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetInvoiceAllDirectionCompletedEventHandler(object sender, GetInvoiceAllDirectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInvoiceAllDirectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInvoiceAllDirectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InvoiceInfoResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InvoiceInfoResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetInvoicePDFCompletedEventHandler(object sender, GetInvoicePDFCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInvoicePDFCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInvoicePDFCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InvoiceInfoResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InvoiceInfoResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetInvoicePDFByInvoiceIdCompletedEventHandler(object sender, GetInvoicePDFByInvoiceIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInvoicePDFByInvoiceIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInvoicePDFByInvoiceIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InvoiceInfoResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InvoiceInfoResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetInvoicePDFByInvoiceIdWithoutDirectionCompletedEventHandler(object sender, GetInvoicePDFByInvoiceIdWithoutDirectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInvoicePDFByInvoiceIdWithoutDirectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInvoicePDFByInvoiceIdWithoutDirectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InvoiceInfoResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InvoiceInfoResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetInvoiceImageCompletedEventHandler(object sender, GetInvoiceImageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInvoiceImageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInvoiceImageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InvoiceInfoResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InvoiceInfoResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetInvoiceTemplateCompletedEventHandler(object sender, GetInvoiceTemplateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInvoiceTemplateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInvoiceTemplateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CorporateTemplateResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CorporateTemplateResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetEArchiveInvoiceCompletedEventHandler(object sender, GetEArchiveInvoiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEArchiveInvoiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEArchiveInvoiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InvoiceInfoResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InvoiceInfoResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetEArchiveIncomingInvoiceCompletedEventHandler(object sender, GetEArchiveIncomingInvoiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEArchiveIncomingInvoiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEArchiveIncomingInvoiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InvoicePackResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InvoicePackResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetEArchiveReportCompletedEventHandler(object sender, GetEArchiveReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEArchiveReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEArchiveReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EArchiveReportResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EArchiveReportResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetInvoiceXMLCompletedEventHandler(object sender, GetInvoiceXMLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInvoiceXMLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInvoiceXMLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InvoiceInfoResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InvoiceInfoResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetInvoiceXMLWithOutFlagCompletedEventHandler(object sender, GetInvoiceXMLWithOutFlagCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInvoiceXMLWithOutFlagCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInvoiceXMLWithOutFlagCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InvoiceInfoResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InvoiceInfoResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetInvoiceWithOutFlagCompletedEventHandler(object sender, GetInvoiceWithOutFlagCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInvoiceWithOutFlagCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInvoiceWithOutFlagCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InvoiceInfoResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InvoiceInfoResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CheckTaxIdListFromExcelFileCompletedEventHandler(object sender, CheckTaxIdListFromExcelFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckTaxIdListFromExcelFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckTaxIdListFromExcelFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EInvoiceCustomerListResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EInvoiceCustomerListResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CheckCustomerTaxIdCompletedEventHandler(object sender, CheckCustomerTaxIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckCustomerTaxIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckCustomerTaxIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EInvoiceCustomerListResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EInvoiceCustomerListResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CheckCustomerTaxIdbyDateCompletedEventHandler(object sender, CheckCustomerTaxIdbyDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckCustomerTaxIdbyDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckCustomerTaxIdbyDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EInvoiceCustomerListResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EInvoiceCustomerListResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetTaxIdListbyDateCompletedEventHandler(object sender, GetTaxIdListbyDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTaxIdListbyDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTaxIdListbyDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EInvoiceCustomerListResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EInvoiceCustomerListResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetEInvoiceCustomerListByDateCompletedEventHandler(object sender, GetEInvoiceCustomerListByDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEInvoiceCustomerListByDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEInvoiceCustomerListByDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EInvoiceCustomerListResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EInvoiceCustomerListResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetEInvoiceCustomerFullListCompletedEventHandler(object sender, GetEInvoiceCustomerFullListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEInvoiceCustomerFullListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEInvoiceCustomerFullListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EInvoiceCustomerFullListResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EInvoiceCustomerFullListResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetFormsAuthenticationTicketCompletedEventHandler(object sender, GetFormsAuthenticationTicketCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFormsAuthenticationTicketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFormsAuthenticationTicketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetFormsAuthenticationTicketPWCompletedEventHandler(object sender, GetFormsAuthenticationTicketPWCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFormsAuthenticationTicketPWCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFormsAuthenticationTicketPWCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CancelInvoiceCompletedEventHandler(object sender, CancelInvoiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelInvoiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelInvoiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InvoiceInfoResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InvoiceInfoResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ReSendInvoiceCompletedEventHandler(object sender, ReSendInvoiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReSendInvoiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReSendInvoiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InvoiceStateResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InvoiceStateResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetInvoiceSummaryCompletedEventHandler(object sender, GetInvoiceSummaryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInvoiceSummaryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInvoiceSummaryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InvoiceSummaryResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InvoiceSummaryResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetInvoiceSummaryWithDateCompletedEventHandler(object sender, GetInvoiceSummaryWithDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInvoiceSummaryWithDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInvoiceSummaryWithDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InvoiceSummaryResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InvoiceSummaryResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetInvoiceCountWithDateCompletedEventHandler(object sender, GetInvoiceCountWithDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInvoiceCountWithDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInvoiceCountWithDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InvoiceCountResultWithDate Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InvoiceCountResultWithDate)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetCustomerDifferenceXmlCompletedEventHandler(object sender, GetCustomerDifferenceXmlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerDifferenceXmlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerDifferenceXmlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CustomerInfoResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CustomerInfoResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetCustomerDifferenceBase64XmlCompletedEventHandler(object sender, GetCustomerDifferenceBase64XmlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerDifferenceBase64XmlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerDifferenceBase64XmlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CustomerInfoResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CustomerInfoResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void LogServerStatusCompletedEventHandler(object sender, LogServerStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LogServerStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LogServerStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ServerStatusResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ServerStatusResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetAvailableSentInvoicesByDateCompletedEventHandler(object sender, GetAvailableSentInvoicesByDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvailableSentInvoicesByDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvailableSentInvoicesByDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InvoicePackResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InvoicePackResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetAvailableSentInvoicesByIssueDateCompletedEventHandler(object sender, GetAvailableSentInvoicesByIssueDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvailableSentInvoicesByIssueDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvailableSentInvoicesByIssueDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InvoicePackResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InvoicePackResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ProcessDataWithCodeCompletedEventHandler(object sender, ProcessDataWithCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessDataWithCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessDataWithCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DBJobProcessResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DBJobProcessResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetHashOfInvoiceCompletedEventHandler(object sender, GetHashOfInvoiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHashOfInvoiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHashOfInvoiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public GetHashOfInvoiceResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((GetHashOfInvoiceResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetEArchiveInvoicesByDateCompletedEventHandler(object sender, GetEArchiveInvoicesByDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEArchiveInvoicesByDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEArchiveInvoicesByDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InvoicePackResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InvoicePackResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetEArchiveInvoicesWithDateCompletedEventHandler(object sender, GetEArchiveInvoicesWithDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEArchiveInvoicesWithDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEArchiveInvoicesWithDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InvoicePackResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InvoicePackResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetEArchiveInvoicesWithIssueDateAndTaxNumberCompletedEventHandler(object sender, GetEArchiveInvoicesWithIssueDateAndTaxNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEArchiveInvoicesWithIssueDateAndTaxNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEArchiveInvoicesWithIssueDateAndTaxNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InvoicePackResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InvoicePackResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetInvoiceHTMLCompletedEventHandler(object sender, GetInvoiceHTMLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInvoiceHTMLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInvoiceHTMLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InvoiceInfoResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InvoiceInfoResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetEArchiveInvoicesByReportNoCompletedEventHandler(object sender, GetEArchiveInvoicesByReportNoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEArchiveInvoicesByReportNoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEArchiveInvoicesByReportNoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InvoicePackResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InvoicePackResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SendInvoiceAsEmailCompletedEventHandler(object sender, SendInvoiceAsEmailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendInvoiceAsEmailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendInvoiceAsEmailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SendEMailResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SendEMailResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetNewInvoiceIdCompletedEventHandler(object sender, GetNewInvoiceIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNewInvoiceIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNewInvoiceIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InvoiceIdResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InvoiceIdResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetReconciliationEArchiveByDateCompletedEventHandler(object sender, GetReconciliationEArchiveByDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReconciliationEArchiveByDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReconciliationEArchiveByDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public eArchiveReconciliationPackResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((eArchiveReconciliationPackResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetReconciliationEArchiveByDateExtendedCompletedEventHandler(object sender, GetReconciliationEArchiveByDateExtendedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReconciliationEArchiveByDateExtendedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReconciliationEArchiveByDateExtendedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public eArchiveReconciliationPackResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((eArchiveReconciliationPackResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetGTBRefAndRegisterNumberCompletedEventHandler(object sender, GetGTBRefAndRegisterNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetGTBRefAndRegisterNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetGTBRefAndRegisterNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public GTBRefAndRegNoResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((GTBRefAndRegNoResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SendTaxFreeInvoiceDataCompletedEventHandler(object sender, SendTaxFreeInvoiceDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendTaxFreeInvoiceDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendTaxFreeInvoiceDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EnvelopeStateResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EnvelopeStateResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CancelInvoiceDataForTaxFreeCompletedEventHandler(object sender, CancelInvoiceDataForTaxFreeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelInvoiceDataForTaxFreeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelInvoiceDataForTaxFreeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResponseResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResponseResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UploadFromArchiveEArchiveCompletedEventHandler(object sender, UploadFromArchiveEArchiveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadFromArchiveEArchiveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadFromArchiveEArchiveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EArchiveStateResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EArchiveStateResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UploadFromArchiveEArchiveReportCompletedEventHandler(object sender, UploadFromArchiveEArchiveReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadFromArchiveEArchiveReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadFromArchiveEArchiveReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EArchiveStateResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EArchiveStateResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetIncomingInvoiceBranchInfoCompletedEventHandler(object sender, GetIncomingInvoiceBranchInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIncomingInvoiceBranchInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetIncomingInvoiceBranchInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InvoicesInfoResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InvoicesInfoResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UpdateEnvelopeStatusFromGibCompletedEventHandler(object sender, UpdateEnvelopeStatusFromGibCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateEnvelopeStatusFromGibCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateEnvelopeStatusFromGibCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InvoicePackResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InvoicePackResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void OutSidersSendEmailCompletedEventHandler(object sender, OutSidersSendEmailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OutSidersSendEmailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OutSidersSendEmailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public OutSidersEMailResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((OutSidersEMailResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void PartnerAndCorporateContourInfoCompletedEventHandler(object sender, PartnerAndCorporateContourInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PartnerAndCorporateContourInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PartnerAndCorporateContourInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ContourInfoListResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ContourInfoListResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CorporateContourInfoCompletedEventHandler(object sender, CorporateContourInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CorporateContourInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CorporateContourInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ContourInfoListResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ContourInfoListResult)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591